役割:あなたは世界でもトップクラスのAWSのインストラクターです。
目的:社内研修でAWSを利用した研修を実施します。
指示:
- 研修参加者はAWSに詳しくない人もそれなりに触っている人も参加します。
- 外部講師は利用しません。
- なるべく研修準備に労力をかけないで、良い研修をしたい。
- 研修は１～３日間程度、合計で6～7時間程度で完了できる内容。
- 研修のタイトル、研修の大まかな内容、必要なもの、研修で得られる効果を記載してください。
- 15種類くらいを目途に提示してください。
- 研修の準備に講師側で、事前に準備が必要なことを記載してください。
- 各研修ごとにナンバリングをしてください。
- チュートリアルが詳しく記載されている内容のものが望ましい。

## 「Lambdaとサーバーレス入門：イベント駆動型アーキテクチャを体験する」研修に必要な情報

この研修を成功させるために、以下の情報を整理し、準備を進めましょう。

**1. 研修目標と学習成果**

* **研修目標:**
    * サーバーレスコンピューティングの概念とメリットを理解する。
    * AWS Lambdaを用いたイベント駆動型アプリケーション開発の基礎を習得する。
    * 他のAWSサービスとの連携を体験し、応用的な活用方法を学ぶ。
* **学習成果:**
    * サーバーレスの概念を説明できるようになる。
    * Lambda関数を作成し、デプロイできるようになる。
    * API Gateway、S3、DynamoDBなどのAWSサービスとLambdaを連携させたアプリケーションを構築できるようになる。

**2. 研修内容詳細**

* **サーバーレスの概念とメリット:**
    * サーバー管理不要、スケーラビリティ、コスト効率などの利点を説明。
    * 従来のサーバー型アーキテクチャとの比較。
    * ユースケース紹介。
* **AWS Lambdaの基本操作:**
    * Lambda関数の作成、設定、デプロイ方法。
    * サポートされる言語 (Python, Node.js, Javaなど) とランタイム環境。
    * イベントソースとトリガーの概念。
* **API Gatewayとの連携:**
    * API Gatewayを用いたHTTPエンドポイントの作成。
    * Lambda関数をAPIエンドポイントに統合する方法。
    * リクエストとレスポンスの処理。
* **他サービスとの連携 (S3, DynamoDB):**
    * S3のイベント (オブジェクト作成など) をトリガーにLambda関数を実行する方法。
    * DynamoDBのデータ更新をトリガーにLambda関数を実行する方法。
    * 他サービスとの連携によるアプリケーションの構築例。
* **ハンズオン: 簡単なサーバーレスアプリケーション作成:**
    * S3にファイルがアップロードされたらLambda関数が実行され、DynamoDBにメタデータを記録するアプリケーション。
    * API Gateway経由でリクエストを受け取り、Lambda関数が処理結果を返すアプリケーション。

**3. チュートリアル選定**

* わかりやすく、ステップバイステップで説明されているチュートリアルを選択する。
* 公式ドキュメントやAWSブログ、re:Postなどを活用する。
* 参加者のレベルに合わせた難易度のチュートリアルを選ぶ。
* 以下のチュートリアルが参考になります。
    * [AWS Lambda 開発者ガイド](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)
    * [サーバーレスアプリケーションの構築 - AWS Hands-on Tutorials](https://aws.amazon.com/getting-started/hands-on/?getting-started-all.sort-by=item.additionalFields.sortDate&getting-started-all.sort-order=desc)
    * [API Gateway と Lambda を使用したサーバーレス API の構築](https://aws.amazon.com/jp/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-dynamodb-cognito/)

**4. サンプルコード準備**

* 各ハンズオンで使用するサンプルコードを用意する。
* 言語はPython、Node.jsなど、参加者に合わせたものを選ぶ。
* コードの内容を理解しやすいように、コメントを記述する。
* GitHubなどのリポジトリでサンプルコードを共有する。

**5. デモ環境構築**

* 研修中に使用するデモ環境を事前に構築する。
* IAMロールの設定、必要なAWSリソースの作成を行う。
* 参加者がスムーズにハンズオンを進められるように、環境設定手順をドキュメント化する。

**6. 必要なもの**

* 参加者用PC (インターネット接続、ブラウザ、AWS CLIインストール済み)
* AWSアカウント (IAMユーザー作成、適切な権限付与)
* プロジェクター、ホワイトボード
* チュートリアル資料、サンプルコード

**7. 事前準備**

* チュートリアルの内容を事前に確認し、手順を把握する。
* サンプルコードが正常に動作することを確認する。
* デモ環境を構築し、動作確認を行う。
* 参加者への事前案内 (AWSアカウント準備、開発環境構築など) を行う。

**8. 想定される質問と回答**

* Lambdaの料金体系について
* コールドスタート問題とその対策
* 他のサーバーレスサービス (Fargateなど) との比較
* 開発言語の選択基準
* デバッグ方法
など、想定される質問への回答を準備しておく。

**9. 研修後のフォローアップ**

* 研修内容に関する質問受付窓口を設ける。
* 追加学習のための参考資料を提供する。
* 応用的な活用事例を紹介する。

これらの情報を参考に、研修準備を進めてください。参加者にとって有益な研修となるよう、丁寧な説明とサポートを心がけましょう。


(16) AWS　Lambdaの最初の一歩　関数をつくって実行しよう！ - YouTube
https://www.youtube.com/watch?v=36lVbVHeIXE

Transcript:
(00:00) 皆様 pc web g をご覧頂き ありがとうございますこの動画では誌面で はご紹介しきれなかった内容をおかわり コンテンツと捨てご紹介させていただき ます 11月号では aws ルームのについて お話をさせていただきましたなので動画で は aws な無駄の最初の一歩を感想を つくって実行しようぶーテーマでお話しさ せていただきます それと3自己紹介をさせてください私 amazon web services ジャパンでパートナーソリューション アーキテクトをしております宇賀神3月と 言いますよろしくお願いしますでは早速 本題に入っていきたいとおもいます aws ラムダですが色々な特徴がござい ますまずは皆さんが作っていただいと ソースコードを持ち込んでず一家をして いただくことができますノード js java python c #ゴー ルビーなどで書いていただいたものを 持ち込んでラムダ上で実行していくことも できますしカスタムランタイムとして 持ち込んでいただくということもできる ようになっています さらにはシンプルなリソースのれるという ことでラクダではメモリをリソースとして 定義していただきますそうすることで
(01:06) cpu やネットワークはそのメモリの 設定に比例して割り当てられていきます なぁのでかなりリソースの考えをシンプル にしていただくことができます難波デート レスというのもございますこちらは アプリケーションを書いていただくときに 気にしていただきたい考え方になってい ます aws ルームだですが起動して 実行されて終了する起動して実行されて 終了するという風な考え方で動きますすっ なので皆さん起動して実行した時にこの ラムダの中に大切なデータを保存して しまうとラウンドの終了と共にこのデータ が失われてしまう可能性がございます なのでな無駄の中にはデータは保存せずに 外出しで s 3やダイナム指などに保存 していきましょう さらにモニタリングとロギングという ところで a ばブレスラムダは cloud ぼっちクラウド落ちロブス トス基本的に連携をしておりますなので ラムダのぜひ高回数とかダムだが出力した ログなどをクラウドお城グッズでご確認 いただくことができます
(02:11) だ aws た胸がどういう風に動いて いくのかというところを説明していきたい とおもいます aws ルームだ自体にリソース管理リ トライロゴし努力も機能を持っております なので皆様はこのラムダ常に関数を保存し て言っていただきますな無駄を保存した だけですとラムらは勝手には動きませんだ 面上からポチッと画面をクリックすると 動くんですけど普通のシステムで使われて いる時にそういった手動実行ってあまりし ないですよね なので呼出元を定義していただく必要が ございます例えば api ゲートウェイ にリクエストがきたイベントをきっかけに ラムラ実行されるダイナモ db の データが変更されたイベントきっかけに眠 だが実行される s 3にファイルがを 変えずはイベントをきっかけにラムダが 実行されるこういった形でイベントを きっかけにダメだが実行されるというよう な考え方をイベントクドイベントドリブン な考え方っていうふうにを言ったりします なのだがこういって呼び出し元の定義を すると実行されていきますは先ほどお伝え した通り aws が無駄はステートレス
(03:14) なので業務データを外出しして保存して いただく必要がございますなので aws ルームだと他のサービスを組み合わせて 使っていただくというのをかなり多い活用 ケースになっております呼び出しオート からもイベント画像数ざっとたくさん 増えるとそれに合わせでダムだがばばば ばばっとたくさん多重化されていきます 負荷に応じて処理を多重化していくので皆 さんでスケールというのを考えていただく 必要はございません さらには一つだけの関数で何かサービスが 実行できるかというとそういうわけでも ないかなと思うので沢山の関数を作って 組み合わせていただくことで最終的に全体 のサービスを作っていただければなぁと 思います そしてだ無駄ですが呼び出し元から無駄が 実行されるさらにナムだが何か別の サービスを呼び出すというところで権限 モデルの考え方がございますラムダの g 控訴して呼び出しの両方について きめ細やかなセキュリティコントロールが できるようになっていきます まず1つめ実行ロールこちらはラムダ関数 が何か別のサービスを呼び出したいときに
(04:20) 使っていきます例えばラムダ関数の一つが ダイナモ db のテーブルからデータを 取得したいこういった時には実行 オーロールが使われます二つめりソース ベースのポリシーですこちらはほかの サービスや他のアカウントから aws ラムダを呼び出すというときに使っていき ます例えば api ゲートウェイで リクエストが来たらだ無駄を呼び出す時に はこのリソースベースのポリシーを使って いきますそれでは実際にダムドの画面をお 見せしながら皆さんに作り方を見て いただこうと思いますこちらが aws の 画面です 画面上部の検索バーから ラムダと入力して表示されたら無駄を クリックしていきましょう これで aws ラムダの画面が開きます 左側のメニューで関数が選択されている ことを確認し右上にある関数の作成の ボタンをクリックしていきましょう ラムダは一から作成設計図の使用など いろいろ選べますが今回は一から作成して いきます
(05:22) 関数名にグリーティングを入力しラン タイムを選んでいきます ダンタイムは既存のものから選ぶことも できますしカスタムランタイムを選択 いただくこともできます では関数の作成をクリックして関数を作っ ていきたいとおもいます 少し待つと関数が出来上がりました グリーティングという名前の関数で画面の 中ほどにはソースコードを入力する ボックスがありますまたランタイム設定で 先ほど設定したランタイムそして ハンドラーではな無駄の実行時にどの関数 が呼び出されるかを定義していきますこの 場合はインデックスファイルのハンドラー 関数が呼ばれる設定になっていますそれで は関数変更していきましょう イベントに入っているボディを取るために イベント.
(06:19) ポディをジェイソンパースで 変換してプログラミングコードから使い やすいようにしていきます ボディという名前で変数が作れたらボディ ネームという値を取るようにしてデプロイ をしていきます デプロイをすることで実際の環境にラムダ 関数の変更が反映されていきますそれでは 実際にこのラムダがちゃんと動くかの テストをしていきましょう テストボタンをクリックしていきます そうするとサンプルのテストデータが入っ ています 今回は api ゲートウェイで受け付け たりクエストをラムダで処理していきたい ので イベントテンプレートから api ゲート ウェイ aws プロキシーを選択します イベント名何でもいいのでサンプルテスト と今回はつけていきますボディに リクエストのボディ部が入ってくるので ここにネームに宇賀神と入力されるような テストデータを作っていきます テストデータができたら右下の作成を クリックしてテストを実行していき
(07:22) ましょう もう一度テストボタンをクリックすると このようにへろ宇賀神と表示された 結果が表示されました では次にこのラムダが api ゲート ウェイでリクエストが来たら 実行されていくようの設定をしていき ましょう 画面上部のトリガーの追加をクリックして いきます トリガーを選択でいろいろのサービス aws もパートナー様のサービスも選べ ますが今回は api ゲートウェイを 選択していきます api を作成するを クリックして頂きまして rest api を今回は選んでいきたいとおもいます セキュリティはオープンでどこからでも誰 でもアクセスできるようにしていきます 追加の設定でいろいろ設定することもでき ますが今回はこのまま追加をクリックし ます 少し待つと api ゲートウェイが できあがりますではこの api ゲート ウェイに実際にリクエストを送ってみ ましょう api ゲートへをクリック するとこのように api のエンド ポイントが表示されていますこちらを
(08:25) コピーしてください 皆様のテストの実行環境を合わせるために 今回はクラウドの員というクラウド上の id 統合開発環境を使って リクエストを実行していきたいとおもい ます クラウドナインのページに行きましたら クリエイト environment を クリックしてネームに何でもいいので適当 なお名前を付けて nextstep を 押してください セッティングもまずはデフォルトの設定で nextstep を押していき クリエイト mi 路面とのボタンを押し ます そうすると統合開発環境がクラウド上で 出来上がっていきます こちらはちょっと時間がかかるんですが しばらく待つとこのような画面が開いて いきます 画面の左側にはファイルやフォルダが表示 されていましてこれをクリックすると 真ん中のところでそのファイルが開きます ここでファイルの編集を実行することが できます今回は画面の下にあるターミナル を使ってリクエストを投げていきたいと おもいます
(09:27) curl コマンドでリクエストを投げ ます先ほどの url をペーストして ハイフンリーでリクエストのボディ部を 入力していきましょう ジェイソンのネームが宇賀神と入力された リクエストボディを送っていきます 実行するとへろ宇賀神っていう文字列が 帰ってきましたこちらは先ほどラムだから 返すように設定したものになっています このクラウドないんですが開発を便利に 使っていただくことができまして例えば aws コマンドサムコマンド さらにはドッカーコマンド ノード税 s のコマンド python のコマンドなどいろいろな 環境がすでにプリインストールされた状態 になっていますクラウド上で開発を行い たい場合はぜひクラウドナインを使って ください画面左上の雲のマークをクリック いただいて号と言わダッシュボードを クリックするとクラウドの画面が開きます
(10:32) これで aws の管理コンソールに戻る ことができました はいということでみなさんには実際の ラムダの画面を見ていただきましたこの ように pc webzine では紙面 や動画で aws のサービスをひとつ ずつピックアップしてご紹介をしています 他の月もぜひ見ていただければと思います それでは皆さん最後までご視聴頂きまして ありがとうございました
