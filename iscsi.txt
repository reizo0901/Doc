https://www.linuxteck.com/how-to-configure-iscsi-target-initiator-on-rhel-centos-7-6/

RHEL/CentOS 7.6でiSCSIターゲット&イニシエータを設定する方法
最終更新日:17年2023月<>日 - LinuxTeckによる - コメントを残す
この記事は、Linux / UnixベースのシステムでiSCSIをセットアップ/構成する方法を学ぶのに役立ちます。iSCSIは(インターネット小型コンピュータシステムインターフェイス)の略で、主にTCP / IP層上でストレージデバイスを共有するために使用される業界標準プロトコルです。SambaやNFSとは異なり、ファイルシステムレベルで機能しますが、iSCSIはブロックレベルのデバイスでのみ機能します。ほとんどのブロックレベルのストレージデバイスには、ボリューム間でデータを共有するための組み込み作業機能があります。

ブロックレベルのストレージを使用する利点は?

可能な限り低いレイテンシ
高パフォーマンスIOPS
高度な冗長性

iSCSIはクライアント/サーバーアーキテクチャを処理します。iSCSIコンポーネントを使用して相互に通信します。クライアントの場合は「イニシエータ」を使用し、サーバの場合は「ターゲット」を使用します。

iSCSIターゲット:これはiSCSIサーバーとも呼ばれ、ディスク/ブロックデバイスをiSCSIイニシエータ/クライアントにエクスポートします。iSCSIサーバーに複数のターゲットを作成でき、各ターゲットには独自の一意のIDがあります。ターゲットごとに1つ以上のLUNを接続することもできます。各LUNにはバック・デバイスが接続されており、そのデバイスはエクスポートされる実際のファイルであり、iSCSIイニシエータから認識されます。ディスクまたはディスクパーティション、LVM、RAID、またはファイルのいずれかです。iscsiプロトコルを使用して、IPネットワークを使用してクライアントと対話します。認証、ネットワークなどのセキュリティ機能を提供します。

iSCSIイニシエータ:iSCSIターゲット/サーバーによってエクスポートされたLUNのインポートを担当するiSCSIクライアントとも呼ばれます。クライアントアプリケーションがサーバーに接続されると、IPネットワークを介してiSCSIサーバーにiSCSIコマンドが送信されます。

このステップバイステップガイドは、RHEL / CentOS 7.6 LinuxでiSCSIターゲットとイニシエータを構成する方法について説明します。このガイドは、コマンドに最小限の変更を加えるだけで、RHEL / CentOS / Fedoraのすべてのバージョンで動作するのに十分公平です。

前提 条件：
Operating System: CentOS Linux 7
IP Address : For Server and For Client
Package : targetcli (Server) and iscsi-initiator-utils (Client)
Port : 3260
Block device : /dev/sdb or /dev/sdc ..

マイラボのセットアップ:
ラボのセットアップには、2台のcentosマシンを使用しています。<>つはiSCSIサーバ/ターゲット用、もう<>つはiSCSIイニシエータ/クライアント用

●iSCSIサーバ:-

オペレーティングシステム: CentOS Linux 7 (コア)
ホスト名: iscsi-server.local
IP アドレス: 192.168.3.101
ブロックデバイス : /dev/sdb

●iSCSIクライアント:-

オペレーティングシステム: CentOS Linux 7 (コア)
ホスト名: iscsi-client.local
IP アドレス: 192.168.3.102

手順に従って、RHEL / Centos-7でiSCSIターゲットを構成/セットアップします。

プロセスを開始する前に、iSCSIターゲットサーバーとして使用する使用可能なディスクを確認する必要があります。

手記：

上記のコマンドは、使用可能なすべてのブロックデバイスまたは特定のブロックデバイスの詳細をツリー形式で一覧表示します。出力は、iSCSI ターゲットサーバーに 2 つのブロックデバイス "/dev/sda と /dev/sdb" があることを示しています。/dev/sda はすでにサーバ OS やその他のアプリケーションに使用されており、/dev/sdb は iSCSI の共有ストレージとして使用できます。

ステップ1:iSCSIターゲット/サーバーをセットアップする
まず、パッケージの最新の現在のバージョンを更新しましょう。

次のコマンドを使用して、ターゲットユーティリティパッケージをインストールします。

# yum install -y targetcli

パッケージを正常にインストールしたら、次のコマンドを入力して、iSCSIターゲットのインタラクティブシェルを取得します。そこで、構成ファイルを編集、一覧表示、および保存できます。これは ".jason" 形式です。ファイルシステムの targetcli レイアウトは階層構造になっています。

# targetcli

targetcli shell version 2.1.fb49
Copyright 2011-2013 by Datera, Inc and others.
For help on commands, type 'help'.

/>

コメント：
上記のインタラクティブシェルでは、「help」コマンドを実行して、使用可能なすべてのオプションを一覧表示できます。次に、「ls」コマンドを使用して、使用可能な構成オブジェクトを一覧表示します。

/> ls

上記の出力では、「/」の下に「バックストア、iscsi、ループバック」の3つのオプションがあることがわかります。「バックストア」の下には、「ブロック、ファイル、pscsi、およびラムディスク」の4つのサブオプションがあります。

backstores	これは、バックストアの使用を定義するストレージオブジェクトとしてアクセスする必要がある一種のローカルストレージまたはパーティションです。ブロックデバイス、LVM、またはファイルのいずれかです。
	block	これは、バックストアの使用を定義するストレージオブジェクトとしてアクセスする必要がある一種のローカルストレージまたはパーティションです。ブロックデバイス、LVM、またはファイルのいずれかです。
	fileio	これは、バックストアの使用を定義するストレージオブジェクトとしてアクセスする必要がある一種のローカルストレージまたはパーティションです。ブロックデバイス、LVM、またはファイルのいずれかです。
	pscsi	これは、バックストアの使用を定義するストレージオブジェクトとしてアクセスする必要がある一種のローカルストレージまたはパーティションです。ブロックデバイス、LVM、またはファイルのいずれかです。
	ramdisk	これは、バックストアの使用を定義するストレージオブジェクトとしてアクセスする必要がある一種のローカルストレージまたはパーティションです。ブロックデバイス、LVM、またはファイルのいずれかです。
iscsi	これは主に、このLUNにアクセスできるユーザー、接続できるLUNの数、およびそのACL(アクセス制御リスト)など、すべての構成に使用されます。
loopback	これはファブリック モジュールに他なりません。

手記：

バックストアでは、通常、ブロックまたはファイルioの2つのサブオプションのみを使用します。残りはそれほど頻繁ではありません。LABの演習では、最初の2つのオプションのみを使用します。
対話型シェルでは、Tab 補完を使用して、部分的に型指定されたコマンドまたはオブジェクト パスを入力できます。

構成部分から始めましょう。

(a) バックストアブロックデバイスを作成します。

オプション 1:

/> /backstores/block create ltecklun1 /dev/sdb

Output:
Created block storage object ltecklun1 using /dev/sdb.

-------->または<---------

オプション 2:
/> backstores/fileio/ create shareddata /opt/ltecklun1.img 1024M

Output:
Created fileio shareddata with size 1073741824

手記：

1番目のオプションを使用して、ブロックデバイス「/dev/sdb」が接続された「ltecklun1」という名前のストレージオブジェクトのブロックタイプのバッキングストアを作成できます。「ls」コマンドを使用して、以下のリストを表示します。

/> ls

手記：

上記の出力が示すように、"ltecklun1" という名前の LUN が作成され、バックアップされたデバイス "/dev/sdb" が階層形式で作成されています。
(b) IQN ターゲット用の iSCSI を作成します。

/> /iscsi create iqn.2020-01.local.server-iscsi:server

手記：

上記のコマンドを使用して、iSCSIターゲット用にカスタムメイドの「iqn」を作成できます。または、引数なしで「作成コマンド」、つまり(/ > / iscsi create)を実行するだけで、デフォルトのiSCSI iqnとターゲット名が作成されます。以下の「ls」コマンドを使用して、リストを表示します。
/> ls

手記：

上記の出力が示すように、TPG3 では「ACL、LUN、およびポータル」の 1 つのオブジェクトが定義されています。ポータルの下に、自動的に作成された TCP ポート '4.0.0.0:0' の IPv3260 インターフェイスが表示されます。
RHEL 7.2 バージョン以降では、既定のポータル構成は自動的に行われますが、以前のバージョンの "7.0 および 7.1" などの RHEL では、ターゲット構成が設定された後に "3260 on 0.0.0.0" の TCP ポートをリッスンするように既定のポータル設定を手動で構成する必要があります。

iSCSIコンポーネントの用語について簡単に説明します。

IQN	(iSCSI修飾名: ターゲットとイニシエータの両方のワールドワイド一意識別名。IQN の命名形式は "iqn.yyyyy-mm.naming-authority:unique-name") です。
yyyy-mm	年と月。命名機関の現在の日付または設立日のいずれかを使用できます。
naming-authority	組織の権限名/インターネットドメイン名を意味します。構文は逆の順序の形式で使用されます(例:com.domainname)。
unique-name	任意の名前を使用できますが、識別のためだけです。
ACLs	(アクセス制御リスト:iQNを使用してアクセス許可を提供します)。
LUNs	(論理ユニット番号:接続するブロックデバイスです。1 つのターゲットに 1 つ以上の LUN を接続できます)。
Portals	(主に、接続を確立するためにイニシエータのターゲットのいずれかのIPアドレスとTCPポートを設定するために使用されます)。

(c) ACL を作成します。

/> /iscsi/iqn.2020-01.local.server-iscsi:server/tpg1/acls create iqn.2020-01.local.client-iscsi:client1

手記：

上記のコマンドを使用すると、クライアントはクライアントのiQNに基づくLUNにアクセスできます。イニシエータ/クライアント名の設定には、同じ iQN 名を使用することを忘れないでください。iQN の不一致がある場合、クライアントはサーバと通信できません。「ls」コマンドを使用して、以下のリストを表示します。

/> ls

(d) iSCSI ターゲットの下に LUN を作成します。

/> /iscsi/iqn.2020-01.local.server-iscsi:server/tpg1/luns create /backstores/block/ltecklun1

 

アウトプット：

LUN 0 を作成しました。
ノード ACL iqn.0-0.local.client-iscsi:client2020 に LUN 01->1 マッピングを作成しました

手記：

上記のコマンドを使用して、ブロックデバイスを特定のターゲットポータルグループ(TPG)に関連付けることができます。この例では、"/backstores/block/ltecklun1" の上に作成されたバッキング ストレージ オブジェクトを使用して、TPG1 の下の LUN ディレクトリに提示します。以下の「ls」コマンドを使用して、リストを表示します。

/> ls

(d)2つのオプションの選択肢:

手記：

CHAP 認証を実行し、ポータルで特定の IP アドレスを使用します。それは完全にあなたの選択の裁量に委ねられています。この記事では、追加のセキュリティとして両方のオプションサービスを使用します。

オプション 1: CHAPP 認証

これは、サーバーとクライアント間の通信を交換するためのセキュリティの追加レイヤーです。サーバーとクライアントの通信間でパスワードを交換するための認証用語は広くサポートされています。手順に従って構成します。

⇒ ディレクトリをtpg1に変更します

