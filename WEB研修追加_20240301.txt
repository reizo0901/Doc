DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'myappdb',
        'USER': 'postgres',
        'PASSWORD': 'postgres',
        'HOST': 'postgresql',
        'PORT': '5432',
    }
}


dockerコンテナ(postgresql)に、以下のコマンド使ってログインする。

docker exec -it postgresql /bin/bash

rootのコンソールでpostgresユーザに切り替えるために、以下を入力し実行する。

su - postgres

postgreのコンソールでpostgreSQLに接続するために、以下を入力し実行する。

psql

psqlのコンソールでデータベース「myappdb」に接続するために、以下を入力し実行する。

\c "myappdb"

PostgreSQLに存在しているデータベースを確認してみましょう。

次のコマンドを入力・実行し、DBの一覧を表示する。
\l

以下のDBが存在します。
myappdb
postgres
template0
template1

※qを押すとコンソールに戻ります。

テーブルの一覧を表示
\d

19個のtableが存在します。

※qを押すとコンソールに戻ります。


※djangoのテーブルが作成されていることを確認する。
  「python3 manage.py migrate」を実行することにより、「settings.py」に記述した
  DATABASE句の設定に従いDBならびにテーブルが作成されています。
  
先ほど登録した管理者情報が書き込まれているか確認してみましょう。

psqlのコンソールで以下を入力

select * from auth_user;

どうですか？登録した管理者ユーザ名が入っていると思います。

データベースの追加・削除が正しくされるか確認してみましょう！

ブラウザにインスタンスのIPアドレスを入力する。
http://<インスタンスのパブリック IPv4アドレス>/admin

「Django管理サイト」が表示されるので、ユーザー名とパスワードを入力してログインしましょう。

「認証と許可」タブの下に「ユーザー」と表示があるので、右側の「＋追加」をクリックする。

「ユーザー名」「パスワード」「パスワード(確認用)」に入力をして、「保存」をクリックする。

登録したユーザがテーブルに追加されているか確認してみましょう。

psqlのコンソールで以下を入力

select * from auth_user;

データベースに先ほど登録したユーザのレコードが追加されていると思います。

管理サイトはをクラスベースドビューによって作成されていて、DjangoでWebアプリケーションを構築した
段階から利用することができます。
作成したアプリケーションで利用するデータベースのデータの編集などもできるアプリケーションになります。

qを押してpsqlコンソールに戻りましょう。
\qを入力実行して、postgresコンソールに戻りましょう。
exitを入力して、rootコンソールに戻りましょう。
exitを入力実行して、postgresqlコンテナから出ます。

