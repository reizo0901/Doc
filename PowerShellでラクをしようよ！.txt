●PowerShellとは？

PowerShellは、Microsoftが開発した強力なタスク自動化および構成管理フレームワークで、.NET Framework上に構成されています。

これにより、PowerShellは.NET Frameworkの豊富なライブラリや機能を直接的に利用することができます。

以下の特徴があります：

コマンドラインシェル：従来のコマンドプロンプトに代わるもので、より高度な操作が可能です。

スクリプト言語：複雑なタスクを自動化するためのスクリプトを簡単に作成できます。

オブジェクト指向：コマンドの出力がテキストではなくオブジェクトとして扱われるため、データの操作を直感的に行うことができます。

クロスプラットフォーム：Windowsだけでなく、macOSやLinuxでも動作します。

クラウド操作：「Azure PowerShellモジュール」や「AWS Tools for Powershell」をインストールすることにより、AzureやAWSなどのクラウドサービスの管理や操作も簡単に行えるようになります。

以上のように色々なことができるPowerShellですが、書き方には少し癖があるところもあるので、使いこなせるように頑張りましょう！

PowerShellを使って、ルーチンワークを自動化したり、複雑な作業をツール化することにより、作業効率を上げたり、作業ミスを減らすことが簡単にできます。
コマンド単体でも使いやすいものが多いので、使用頻度が高いものについては便利な使い方の紹介をしていきます。

Windows7およびWindows Server 2008 R2から標準でコンソールと開発環境がインストールされているので、学習をすぐに始めることができます。
また開発言語寄りのコーティングもできるため、バッチファイルを作成で挫折しかけた方や、プログラム言語を学習したい人にもおすすめな言語と言えます。

ここからは実際にコマンドレットを実行してPowerShellに慣れていきましょう。
まずは実行結果に違いが出ないように、チュートリアル用として以下のフォルダとファイルを作成します。

<フォルダ>
c:\ps_test
<ファイル>
c:\ps_test\test1.txt
c:\ps_test\test2.txt
c:\ps_test\test3.dat
c:\ps_test\test4.dat
c:\ps_test\test5.log
c:\ps_test\test6.log

PowerShellを起動してみましょう！

・「Windows + R」キーを押して「ファイル名を指定して実行」ダイアログを開き、「powershell」と入力してEnterキーを押します。

コマンドプロンプトとの動作の違いも確認するので、コマンドプロンプトも起動しておきましょう！

・「Windows + R」キーを押して「ファイル名を指定して実行」ダイアログを開き、「cmd」と入力してEnterキーを押します。

PowerShellの画面で以下のコマンド実行すると、上記のフォルダとファイルが作成され、「c:\ps_test」に遷移します。

mkdir c:\ps_test
echo test1テキスト > c:\ps_test\test1.txt
echo test2テキスト > c:\ps_test\test2.txt
echo test3データ > c:\ps_test\test3.dat
echo test4データ > c:\ps_test\test4.dat
echo test5ログ > c:\ps_test\test5.log
echo test6ログ > c:\ps_test\test6.log
cd c:\ps_test

コマンドプロンプトの画面でも「c:\ps_test」に遷移しておきましょう。

cd c:\ps_test

簡単にPowerShellのコンソールの便利な機能を紹介しておきます。


タブ補完

コマンドやパスを入力する際に、タブキーを押すことで自動的に補完してくれます。さらにタブキーを押すことで次の候補が表示されます。
例えば、Get- と入力してタブキーを押すと、Get-Command や Get-Process などの候補が表示されます。
長めに入力してからタブキーを押したほうが、目的のコマンドが出力されやすくなります。
Get-ChildItemというコマンドを呼び出しみようと思います。

[PowerShellで操作]
get-Ch[タブキー]

get-ChildItemが候補に出力されましたね。

次にファイル名を候補で出力したいと思います。

[PowerShellで操作]

t[タブキー]

[タブキー]を押すたびに次の候補が出力されます。

履歴機能

過去に入力したコマンドの履歴を参照することができます。上下の矢印キーを使って、以前のコマンドに簡単にアクセスできます。
get-historyコマンドレットでこれまでの履歴を確認することができます。
また履歴の一覧に表示されたコマンドを実行する場合はInvoke-History 履歴番号と入力します。

[h]だけで実行してもGet-Historyが動作します。
また[r 履歴番号]でもInvoke-Historyが動作します。

[おまけ]
コマンドプロンプトでも[F7]を押すと同じような機能を呼び出すことができます。

●PowerShellを構成する要素

PowerShellで実行可能な命令として以下の３つの要素があります。

・コマンドレット(cmdlet)
 　PowerShellのベースとなるコマンド群で、特定のタスクを実行するための小さなプログラム。

・ファンクション(function)
　 カスタムコマンドで、複数のcmdletや他の関数を組み合わせて使用します。

・エイリアス(alias)
　 Cmdletや関数の短縮名で、入力を簡略化するために使用。

実際にコマンドを入力して要素の一覧を確認してみましょう。

> Get-Command

コマンドレット、ファンクション、エイリアスの一覧が表示されましたね。

?コマンドレットの説明を見るには？

get-help <説明を見たいコマンドレット名> または -? オプションをつけます。

> get-help get-command
または

> get-command -?
※/?では見れません。

もっと詳しい説明を見たい場合は、「-detailed」を最後に引数で渡します。

> get-help get-command -detailed

使い他の例を見たい場合は、「-examples」を最後に引数で渡します。

> get-help get-command -examples

?「コマンド」と「コマンドレット」の表記の違いは何ですか？

コマンドとは？

定義：コマンドは、システムに対して特定の操作を実行するための指示です。コマンドプロンプトやUnix/Linuxシェルで使用されます。

形式：通常、単一の単語や短いフレーズで構成されます（例：dir、ls、copy）。

実行ファイル：多くの場合、スタンドアロンの実行可能ファイルとして存在します。

コマンドレットとは？

定義：コマンドレットは、PowerShellで使用される特定のコマンドのことを指します。PowerShellの環境で動作するように設計されています。

形式：動詞-名詞の形式で命名されます（例：Get-ChildItem、Set-Content）。この形式により、コマンドの目的が明確になります。

実行ファイル：コマンドレットはスタンドアロンの実行可能ファイルではなく、.NETクラスのインスタンスとして実装されています。
機能：コマンドレットは、PowerShellランタイムによって解析、エラー表示、出力の書式設定が処理されます。また、パイプラインを通じてオブジェクトを受け取り、出力することができます。

コマンドレットはPowerShell特有の呼び方となっています。

●コマンドレット(cmdlet)や一部のファンクションの命名規則について

コマンドレット(cmdlet)と一部のファンクションのコマンド名は「動詞-名詞」の形で命名されています。

<コマンドの一例>

Get-Commnad コマンドの一覧をゲットする。
Set-Location ロケーションをセットする。
Start-Service サービスを開始する。

Select-Object オブジェクトを選択する。
New-EventLog イベントログを作成する。

●コマンドレットを使ってみよう

例として、次のコマンドでファイルの一覧を出力してみましょう。

(1)コマンドプロンプト風コマンド
> dir

(2)linuxコンソール風コマンド
> ls

(3)PowerShell用のコマンド
> get-childitem

(4)PowerShell用の短縮されたコマンド
> gci

どれも同じ結果が出力されていますね。

PowerShellでは、DOSコマンドやLinuxと同じようなコマンドで入力できるようにエイリアスが設定されています。

?エイリアスとは？

エイリアスとは簡単に言うとPowerShellコマンドを別名で実行できるようにする仕組みやコマンドそのものになります。

これによりコマンドを簡素化して実行することができます。

参考サイトなどでは、サンプルのコマンドやソースがエイリアスで記載されている場合あります。

dirコマンドの元になっているコマンドレットを、次のコマンドで見てみましょう。

> Get-Alias dir

<実行結果>

dirコマンドはGet-ChildItemのエイリアス(別名)ということがわかります。

「Get-Alias」は引数を入れないで実行すると、設定されているすべてのエイリアスが表示されます。

結構な量のエイリアスが割り当てられていますね。
「Set-Alias」を使って自分で割り当てることも出来ます。

「Get-Help」を使ってコマンドの説明を表示する時も、エイリアス名で検索をすることができますが、説明自体は元のコマンドレットの名前で表示されるので、注意が必要です。

●PowerShellが返してくるオブジェクトを理解しよう

PowerShellの大きな特徴として、コマンドレットの実行結果はオブジェクト形式で返ってきます。
コマンドプロンプトでコマンドを実行して返ってくる結果はテキスト形式で返ってきます。

難しそうですが、理解できればPowerShellを有効に使うことができるようになります。
逆にここを理解しないと、PowerShellを使いこなすことができないとも言えます。

簡単にDirコマンドを実行した際に引き渡されるデータを見てみましょう。
作成したチュートリアル用のフォルダに遷移します。

cd c:\ps_test
[コマンドプロンプトで操作]

c:\ps_test>dir test1.txt

 ドライブ C のボリューム ラベルがありません。
 ボリューム シリアル番号は 84D0-D5D5 です

 c:\ps_test のディレクトリ

2025/01/08  16:48                24 test1.txt
               1 個のファイル                  24 バイト
               0 個のディレクトリ  104,445,890,560 バイトの空き領域

上のような内容が表示されます。

これはコマンドプロンプトで実行したコマンドが文字列を返してきたものが画面に表示されています。

[PowerShellで操作]

PS c:\ps_test>dir test1.txt

    ディレクトリ: C:\ps_test

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        2025/01/08     16:48             24 test1.txt

上のような内容が表示されます。

これはPowerShellで実行したコマンドレットがオブジェクトを返してきたものが画面に表示されています。
コマンドプロンプトの出力結果とは少し異なるものが出力されていますね。

そこまで大きな違いが無いように見えますが、それぞれが返してきている値を確認するために以下の
コマンドとコマンドレットを実行してみましょう。

[コマンドプロンプトで操作]

@echo off
for /f "usebackq tokens=*" %i in (`dir test1.txt`) do echo %i
説明：
dirコマンドでtest1.txtファイルの検索指定で実行した際に、返ってきている値を１行ずつ画面に表示しています。

表示結果：

ドライブ C のボリューム ラベルがありません。
ボリューム シリアル番号は 84D0-D5D5 です
c:\ps_test のディレクトリ
2025/01/08  16:48                24 test1.txt
1 個のファイル                  24 バイト
0 個のディレクトリ  104,444,878,848 バイトの空き領域

コマンドを実行したときと同じ内容が表示されています。

[PowerShellで操作]

foreach($a in dir test1.txt| select *){write-host $a}
説明：
dir(Get-ChildItem)コマンドレットでtest1.txtファイルの検索指定で実行した際に、返ってきているオブジェクト内容のすべてを画面に表示しています。

表示結果：

@{PSPath=Microsoft.PowerShell.Core\FileSystem::C:\ps_test\test1.txt; PSParentPath=Microsoft.PowerShell.Core\FileSystem::C:\ps_test; PSChildName=test1.txt; PSDrive=C; PSProvider=Microsoft.PowerShell.Core\FileSystem; PSIsContainer=False; Mode=-a----; VersionInfo=File:             C:\ps_test\test1.txt
InternalName:
OriginalFilename:
FileVersion:
FileDescription:
Product:
ProductVersion:
Debug:            False
Patched:          False
PreRelease:       False
PrivateBuild:     False
SpecialBuild:     False
Language:
; BaseName=test1; Target=System.Collections.Generic.List`1[System.String]; LinkType=; Name=test1.txt; Length=24; DirectoryName=C:\ps_test; Directory=C:\ps_test; IsReadOnly=False; Exists=True; FullName=C:\ps_test\test1.txt; Extension=.txt; CreationTime=2025/01/08 16:48:13; CreationTimeUtc=2025/01/08 7:48:13; LastAccessTime=2025/01/09 11:24:27; LastAccessTimeUtc=2025/01/09 2:24:27; LastWriteTime=2025/01/08 16:48:13; LastWriteTimeUtc=2025/01/08 7:48:13; Attributes=Archive}

test1.txtファイルの情報が詳しく出力されていることがわかります。

このようにPowerShellのコマンドレットが返してくる値は、文字列ではなく複数の情報を持ったオブジェクトとして
構成されています。

●パイプラインとフィルタリングについて

コマンドレットのオブジェクトを最大限利用するにはパイプラインとフィルタリングの理解が必須となります。

パイプラインとは
コマンドの出力を次のコマンドの入力として渡す仕組みです。これにより、複雑な処理を簡潔に記述できます。
PowerShellでは出力されたオブジェクトを元データとして次のコマンドで処理を行うことができます。

フィルタリングとは
パイプラインと組み合わせて、コマンドの出力結果から必要なものだけを取り出すことができます。

次からパイプとフィルタリングを使って理解を深めていきましょう。

「Get-ChildItem」を実行するとカレントプロンプトにあるフォルダやファイルの一覧が表示されます。

●Where-Object 条件を設定する。

フィルタを使って拡張子が「.txt」のものだけを取得したい場合は、以下の様に記述します。

> Get-ChildItem | Where-Object Name -Like '*.txt'

出力結果：

    ディレクトリ: C:\ps_test

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        2025/01/08     16:48             24 test1.txt
-a----        2025/01/08     16:48             24 test2.txt

Get-ChildItem自体にもフィルタのオプションが存在するので、以下のように書いた結果と同じになります。
Get-ChildItem *.txt

フィルタ以外にもパイプラインを使った便利な使い方があるので練習してみましょう。

●Select-Object 出力される内容を選択する。

画面に出力される項目を選択してみましょう。
ファイル名、フルパス、フォルダ名、最終更新日時、ファイルサイズを選択してみましょう。

Get-ChildItem | Select-Object name,fullname,directoryname,lastwritetime,length | Where-Object Name -Like '*.txt'

引き渡されたオブジェクトに対して、Select-Objectを使うことで項目を選択することができます。

出力形式を設定しよう！

先ほどの出力結果と表示方法が変わってしまっていますね。
画面出力の書式を設定してみましょう。

Get-ChildItem | Select name,fullname,directoryname,lastwritetime,length | format-table

横一列に表示されましたね。

画面表示で利用されるFormatコマンドは以下の５通りがあります。

Format-Table：テーブル形式でオブジェクトを表示します。項目の下にそれぞれの値が表示されます。
Format-List：リストの形式でオブジェクトを表示します。各プロパティはラベル付けされ、別々の行に表示されます。
Format-Wide：単一項目形式
Format-Hex：16進数でオブジェクトを表示します。元のデータによっては表示ができない場合があります。
Format-Custom：カスタマイズした形式でオブジェクトを表示します。事前にカスタムビューを作成する必要があります。

「Format-Table」「Format-List」の２つだけ覚えておけば普段使いには困りません。

出力結果の並び替えをしょう！

sort-objectを利用することで、指定した項目で並び替えを行うことができます。
結果を画面上で確認する場合は項目単位でソートされているほうが何かと都合がよい時があります。
出力されるデータを指定した項目で並び替えをしてみましょう。

今回はlengthを並び替えの項目として指定しています。

Get-ChildItem | Select-Object name,fullname,directoryname,Extension,lastwritetime,length | Sort-Object length | format-table

lengthの項目が昇順で並び替えされていますね。
逆に降順にしたい場合は以下のように -Descendingのオプションを付けることで逆順になります。

Get-ChildItem | Select-Object name,fullname,directoryname,Extension,lastwritetime,length | Sort-Object length -Descending | format-table

逆順のオプション長いですね。-desでも、-dでも機能します。
オプションはどこまで短縮できるのかは明記されていないため色々と試してみるのもよいかもしれません。
単語が被っているオプションが無ければ短くできるのかもしれませんね。

それぞれの項目を昇順にしたり、降順にしたりするにはカスタムプロパティを利用する必要があります。
記事の後半で説明しています。

PowerShellの変数にオブジェクトを格納してみましょう。

PowerShellの変数は変数名の先頭に$(ドルマーク)を付けることにより宣言できます。
変数名にはスペースや一部の記号を使うことができません。
基本的にはアルファベット、数字、アンダースコアを使用して名前を付けることが推奨されています。

先ほどのコマンドの結果を変数に格納してみましょう。

[PowerShellで操作]

$hensu = Get-ChildItem | Select-Object name,fullname,directoryname,Extension,lastwritetime,length | Sort-Object length -Descending | format-table

格納した変数の中身を見てみましょう。

Write-Output $hensu

コマンドを実行したときと同じ内容が出力されていますね。
これは変数にオブジェクトがそのまま格納されているため、同じ結果が出力されています。

感の良い人は気づいてしまったかもしれませんが、オブジェクトが格納されている変数に対してもフィルターやパイプを使うことができます。
変数に対して、ファイル名での並び替えをしてみましょう。

[PowerShellで操作]

Write-Output $hensu | Sort-Object name

どうですか。ファイルの名前で並び替えができました。
このように変数に格納することによって、後からでもフィルターやパイプによる操作が可能となっています。

変数に入っているファイル名の一覧を使って、ファイルの内容を出力してみましょう。

[PowerShellで操作]

foreach ($h in $hensu){
>> write-output "FileName[$h]"
>> get-content $h
>> write-output `n
>> }

説明：
変数$hensuの中にはファイルやフォルダのリストをオブジェクトとして格納されています。
foreachを使って$hensu内のnameの項目を変数$hに一つずつ取り出しています。
foreachは条件を満たすまで処理を繰り返します。ここでは$hensuからすべてのファイル名を取り出すまでとなります。
{}の間に繰り返す処理として、ファイルの内容を表示するためのGet-Contentに$hを渡しています。
これにより、$hensuの中にあるすべてのファイルを内容を画面に出力する結果となります。

<実行結果>

FileName[subfolder1]
get-content : パス 'C:\ps_test\subfolder1' へのアクセスが拒否されました。
発生場所 行:3 文字:1
+ get-content $t
+ ~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (C:\ps_test\subfolder1:String) [Get-Content], UnauthorizedAccessException
    + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand

FileName[subfolder2]
get-content : パス 'C:\ps_test\subfolder2' へのアクセスが拒否されました。
発生場所 行:3 文字:1
+ get-content $t
+ ~~~~~~~~~~~~~~
    + CategoryInfo          : PermissionDenied: (C:\ps_test\subfolder2:String) [Get-Content], UnauthorizedAccessException
    + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand

FileName[test1.txt]
test1テキスト

FileName[test2.txt]
test2テキスト

なんだかエラーが出力されていますね。
エラーをよく見てみるとSubFolder1とSubFolder2が問題になっていますね。これはフォルダに対して


●クリップボードを使う

出力内容をコンソールからマウスなどでドラックして貼り付けをしていませんか？
簡単にクリップボードに出力内容を格納するほうほうがあります。
set-glipboardを使えば、出力されるはずの内容を直接クリップボードに格納することができます。
またクリップボードの内容をPowerShellの変数に格納することも可能です。

これによりデータの取得や、繰り返し処理で利用する一覧などをファイルの読み込みなどのコマンドを書かなくても実現することができます。

練習でファイルの一覧をクリップボードに格納してみましょう。

Get-ChildItem | set-clipboard
もしくは
dir | scp ※エイリアス表記の場合

次にエクセルを開いて、適当な場所に貼り付けてみてください。

















Formatコマンドで画面への出力を設定していましたが、ファイルやクリップボードへの出力についても練習してみましょう。

○テキストファイルとして出力してみよう。

| Out-File <出力ファイル名>
もしくは
> <出力ファイル名>

○csvファイルとして出力してみよう。

Export-Csv -Path <出力ファイル名> -Encoding default

○xmlファイルとして出力してみよう。

Export-CliXml -Path <出力ファイル名>


●クリップボードを使ってPowerShellをもっと便利に











●オブジェクトの画面標準出力の項目とカスタムプロパティについて

Get-ChildItemを実行した結果として、「Mode」「LastWriteTime」「Length」「Name」が表示されます。
オブジェクトには、この4項目以外の情報も取得されていますが、デフォルトの画面出力は4項目のみとなっています。

<うんちく>
?デフォルトの出力項目はどうやって決まっているの？

コマンドレットによってことなりますが、Get-ChildItemの場合は、FileSystemを利用しているコマンドレットなので、FileSystemを扱うための定義ファイルで設定されています。

確認する方法は

(1)PowerShellのインストールディレクトリを確認

> $PSHome

(2)定義ファイルを開く

※内容を書き換えないように気を付けてください。

> notepad.exe “$PSHome\FileSystem.format.ps1xml”

FileSystem.format.ps1xmlというファイルのVIEW DEFINITIONSセクションにデフォルトの出力項目が設定されています。

※4項目以外の情報についても記述されていますが、次の手順から少し深堀りしていきます。

4項目以外にも、どんな情報が含まれているのか確認してみましょう。

<コマンドレットの記述>

> Get-ChildItem -path c:\windows\system32 | Where-Object Name -Like 'wsock32.dll' | Format-List

<エイリアスを使った記述>

> dir -path c:\windows\system32 | Where Name -Like 'wsock32.dll' | fl

エクスプローラーで確認できる内容がオブジェクトとして返されていることがわかります。

上記のコマンドレットは以下の様な処理が行われ結果を出力しています。

「Get-ChildItem」に-pathオプションで「c:\windows\system32」フォルダを参照するように指示しています。

「|」(パイプ)の後ろに(1)で渡されたオブジェクトに対して「Name」が「wsock32.dll」のものを抽出するようにフィルタで指示しています。

「|」(パイプ)の後ろに(2)で渡された情報の詳細表示をするように指示しています。

左のほうから右に向けて、情報を絞っていっていることがわかります。

次に「Name」と「CreationTime」と「ProductVersion」だけが出力されるように記述してみましょう。

> Get-ChildItem -path “c:\windows\system32” | Select-Object Name,CreationTime,ProductVersion | Where-Object Name -like 'wsock32.dll'

「ProductVersion」の欄が空白になってしまっていますんね。

これは「ProductVersion」という項目は存在していなくて、「VersionInfo」の中に配列として格納されているために直接取得はできません。

Select-Objectとしての指定した場合に、「ProductVersion」という項目が存在しないためNullとして空欄が表示されます。

カスタムプロパティを利用することによって取得することが可能になります。

次のコマンドで「VersionInfo」内の「ProductVersion」を取得できるようにしてみましょう。

> Get-ChildItem -path c:\windows\system32 | Select-Object Name,CreationTime,@{Name='ProductVersion';Expression={$_.VersionInfo.ProductVersion}} | Where-Object Name -like 'wsock32.dll'

上手く取得できましたね。ではカスタムプロパティの記述について説明します。

カスタムプロパティは以下のように記述します。
@{Name='ProductVersion';Expression={$_.VersionInfo.ProductVersion}}

@{} ← カスタムプロパティの外枠

Name='ProductVersion' ← プロパティに名前を付けています。ここではProductVersionとしていますが、どんな名前でも大丈夫です。

;Expression={$_.VersionInfo.ProductVersion} ← Expressionは式のこと。「$_」は、直前に実行された実行結果(オブジェクト)を取得できます。オブジェクトから「.VersionInfo.ProductVersion」の内容を抽出します。

少し難しいですが、オブジェクトをきっちんと理解するのに必要となります。

(1)まず「wsock32.dll」を対象に「Name」「CreationTime」「VersionInfo」の情報を抽出し、変数($temp)に格納します。

> $temp = Get-ChildItem -path c:\windows\system32 | select Name,CreationTime,VersionInfo | where Name -like 'wsock32.dll'

(2)変数($temp)に格納したオブジェクトの中身を確認してみましょう。

> write-host $temp

@{}の中に「Name」「CreationTime」「VersionInfo」の情報が格納されていることがわかります。

また「VersionInfo」の中には、「File」~「Language」の各項目と内容が格納されています。

(3)変数の中から「Name」の項目だけを出力してみましょう。

> Write-Host $temp.Name
ピリオドで区切って表記することで、オブジェクトの中から「Name」の情報を取得することができました。

(4)ProductVersionの内容を出力してみましょう。

> Write-Host $temp.VersionInfo.ProductVersion
オブジェクトの中の「VersionInfo」の中の「ProductVerion」の情報を取得することができました。

オブジェクトに入っている情報は、正しく記述することで簡単に取り出すことができます。

●PowerShellでは様々な情報にアクセスし操作することができます。
※この仕組みはPowerShellから実装された機能のひとつで、使い方を理解しておくと色々と役に立ちます。

↑プロバイダー？何言ってるのってなると思います。構えないでください。分かり易く説明します。
PowerShellでいうプロバイダーとは、特定のデータストア（例えばファイルシステム、レジストリ、環境変数など）に
アクセスし、操作するための仕組みです。プロバイダーを使うと、これらのデータストアをファイルシステムのように扱うことができます。

以下に、代表的なプロバイダーの種類とその内容を説明します。

1. FileSystem
　ファイルシステムプロバイダーは、ローカルおよびネットワーク上のファイルシステムドライブを扱います。
　※これはコマンドプロンプトで扱えていたWindowsFileSystemと同じものになります。
2. Registry
　レジストリプロバイダーは、Windowsレジストリのキーと値をドライブとして扱います。
3. Certificate
　証明書プロバイダーは、証明書ストアをドライブとして扱います。例：Cert:\
4. Environment
　環境変数プロバイダーは、環境変数をドライブとして扱います。例：Env:\
5. Function
　関数プロバイダーは、PowerShell関数をドライブとして扱います。例：Function:\
6. Alias
　エイリアスプロバイダーは、PowerShellエイリアスをドライブとして扱います。例：Alias:\
7. Variable
　変数プロバイダーは、PowerShell変数をドライブとして扱います。例：Variable:\
8. WSMan
　WSManプロバイダーは、WS-Management（Windowsリモート管理）設定をドライブとして扱います。例：WSMan:\

次のコマンドレットを実行し、利用可能なプロバイダを調べてみましょう。

Get-PsDrive

利用可能なプロバイダの一覧が表示されます。
この一覧の「Provider」項目に出力されている内容が、Providerの種類になっています。

例えば、FileSystemのものだけを表示したい場合は以下のように記述します。

Get-PsDrive -PSProvider 'FileSystem'
もしくは
Get-PsDrive | Where-Object Provider -like 'Microsoft.PowerShell.Core\FileSystem'

FileSystemで扱えるドライブだけが表示されました。

先ほども「●PowerShellのGet系のコマンドレットを理解しよう。」で触れましたが、

Get-ChildItemはよく使うコマンドなので、使い方をちょっとだけ深堀りしていきます。

Get-ChildItemでよく使われるオプション

対象コンテンツ（ファイル、フォルダ等）へのパスを指定します。
-Path

|例1：対象フォルダを指定する場合
|Get-ChildItem -Path c:\windows\system32
|または
|ls -Path c:\windows\system32
|
|例2：対象ファイルを指定する場合(ワイルドカード指定可能)
|Get-ChildItem -Path c:\windows\system32\*.dll
|または
|ls -Path c:\windows\system32\*.dll

ファイル名だけを表示します。
-Name または -N

指定した名前のコンテンツを対象とします。
-Include または -I

|例：特定の拡張子のファイルを対象とする場合
|Get-ChildItem -Path c:\windows\system32 -Recurse -Include *.exe,*txt
|ls -
|※-includeと-Excludeオプションは-Recurseオプションと一緒に使わないと機能しません。

指定した名前以外のコンテンツを対象とします。
-Exclude または -E

指定された場所にある項目と、その場所のすべての子項目にある項目を取得します。
-Recurse または -S

取得するサブディレクトリの階層の深さを指定します。
-Depth また -D
|例：3つ下の階層までのフォルダ一覧を取得する場合
|Get-ChildItem -Depth 3 -Directory
|または
|ls -d 3 -ad

|※-includeと-Excludeオプションは-Recurseオプションと一緒に使わないと機能しません。

指定した属性のファイルとフォルダーを取得します。
-Attributes または -A

検索対象をフォルダにします。
-Directory

検索対象をファイルとします。
-File

検索対象を非表示項目とします。
-Hidden

検索対象を読み取り専用とします。
-ReadOnly

検索対象をシステムファイルとフォルダにします。
-System

証明書ストアを覗いてみましょう。

cd cert:

Get-ChildItem
または
dir
または
ls

これで証明書ストアに入れました。簡単ですね。
ルート証明書のストアに遷移してみましょう。

cd Root

Get-ChildItem
または
dir
または
ls

ルート証明書ストアに遷移されました。
詳しい情報を確認した場合は、そうです！ | format-listをつけるだけです。

Get-ChildItem | format-list
または
dir | format-list
または
ls | fl

各証明書の詳細情報が出力されます。

せっかくなので、情報をcsvで出力してみましょう。

Get-ChildItem | export-csv -path c:\work\certcsv.csv -notypeinformation

これでCSV形式で「c:\work\certcsv.csv」に出力されます。
エクセルやメモ帳で内容を確認してみましょう。

一部文字化けしているところがありますね。←環境によっては発生しない。

次の様に直して再度実行してみましょう。

Get-ChildItem | export-csv -path c:\work\certcsv.csv -notypeinformation -Encoding UTF8

今度は正しく出力されていますね。
詳細設計書にパラメータを載せる時は、ほぼ編集がいらないため間違いもなく便利です。

│文字化けの原因としては、PowerShellのExport-CSVはデフォルトでUTF-8エンコーディングが使用されます。
│しかし、特定の環境やアプリケーション(EXCELなど)ではUTF-8を正しく認識できことがあるため、違う文字コード
│として認識し、画面表示を行うため文字化けが発生します。
│またシステムのデフォルトエンコーディングとExport-CSVで使用されるエンコーディングがあっていない場合も
│同様の現象が発生します。
│Export-CSVのオプションで「-encoding UTF8」を明示することにより、この事象を回避することができます。

●よく使うコマンドレット一覧と使い方
お待たせしました。よく使うコマンドレット一覧を紹介します。
※あくまでも個人的なおすすめなので、いやこれもよく使うよってものがあれば教えてください。


・便利なコマンドレット一覧

PowerShellで参照可能なドライブ情報などを取得する。
このコマンドは

get-psdrive

出力結果の「Provider」項目にAlias,FileSystem,Certificate,Environment,Function,Registry,Variable,WSMANの種類があります。
PowerShellではFileSystem以外の情報も簡単に参照することができるようになっているため、補足で説明をします。

<Provider>
Alias:セッション状態で保存されたエイリアスのビューが格納されるドライブ
FileSystem:Windowsファイルシステムのドライブ
Certificate:X509 証明書プロバイダー
Environment:処理の環境変数ビューが格納されるドライブ
Function:セッション状態に保存された関数のビューが格納されるドライブ
Registry:レジストリ
Variable:セッション状態で保存された変数のビューが格納されるドライブ
WSMAN:WsMan 構成保管のルートです。

詳細なドライブ情報を取得する。
get-psdrive | format-list

ファイルの一覧を取得(単一フォルダ/サブフォルダ/階層指定)
取得した情報をCSVファイルとして出力
取得した情報をクリップボードに出力
CSVファイルの内容を配列に格納
クリップボードの内容を配列に格納
配列の内容でループさせる
全てファイル名を一括変更
 ファイル名の頭に付与、拡張子の前に付与、拡張子の後ろに付与
ファイルの一部を抽出する
ファイルをグレップして抽出する。
各ドライブの空き容量を取得する。

・ファイルの書式変更
・ファイルの一覧とある程度の詳細情報も併せて取得したい。
・ネットワーク情報を取得・変更したい。
・外部の実行ファイルやバッチファイルを実行して、リターンコードを取得したい。
・特定のレジストリを参照・修正・削除したい。
・特定のサービスの状態を取得・変更したい。
・条件を指定してイベントログを抽出したい。
・OSのバージョンを判定するには
・Windows Updateの状態をチェックする。
・プロセスごとのCPU使用率をソートして抽出

・サーバ保守系でよく使うコマンドレット一覧

・サーバ構築系でよく使うコマンドレット一覧

・クライアントキッティングでよく使うコマンドレット一覧

・パブリッククラウド系でよく使うコマンドレット一覧(AWS編)

・パブリッククラウド系でよく使うコマンドレット一覧(Azure編)

●PowerShellでプログラミングしてみよう。

PowerShellは上から下へ、左から右へ処理が行われます。
なに言ってるの？って思うかもしれませんが、PowerShellでプログラムを実行した時に
予期しない結果になることがあります。

PowerShellは特殊な書き方が可能な言語であるため、このルールを理解しないで記述すると
正しく動作しないことがあります。

例えば、定数は一番上に記述する。
関数をメインプログラムよりも先に記述するなど・・・。

後は関数を作成したいけど、引数を渡すのがメンドイっていう人には、特別な記述のしかたもあります。
※おすすめはしませんが、スコープを変更することによって、扱える範囲を広くすることができます。

PowerShellは変数や配列のアドレスを関数に引き渡したりできないため、同一サイズのメモリの消費がされる想定なので、
サイズの大きい配列を渡す場合は、スコープにしてあげてメモリの消費を抑えるのも手段の一つと考えます。

通常のコマンドの書き方

特殊なフィルタなどをかける場合の書き方

取得した結果や配列の内容に対して繰り返して同じ処理をしたい場合の書き方

こんな作業で困ったことないですか？

普通の言語にはあるけどPowerShellに存在しない関数

業務で使いやすい便利なコマンド一覧






※※※これより下はプログラムの管轄なので記載するか検討する。

※変数、配列、構造体変数、構造体配列を理解している方は読み飛ばしてください。

変数とは？
コンピュータ上では、一時的に値を入れておく箱のことを変数といいます。※箱はあくまでもイメージです。

変数(箱)を利用するにはそれぞれ名前と入れる値の型を決める必要があります。

以下は変数を作る際の一般的に付けられる名称と型を紹介しています。

名前を入れるなら、変数の名前は「name」で、型は「文字列型」

生年月日を入れるなら、変数「birthday」で、型は「日付型」

年齢を入れるなら、変数の名前は「age」で、型は「数値型」

数値を入れたいときは、大半のプログラムでは、「変数 = 値」の記述になります。

PowerShellは変数の頭に「$」を付けるルールがあるので、以下のようになります。

文字や文字列を変数に入れる場合は、「"」や「'」で文字を囲います。

> $name = “山田太郎”

日付を変数に入れる場合は、日付型に変換して格納する必要があります。

> $birthday = [Datetime]"1997/5/3"

数値を変数に入れる場合は、そのまま数字を記述します。

> $age = 27

※「"」や「'」で囲って変数に入れてしまうと、文字として数字が格納されてしまうため、計算を行う際にエラーになります。

格納した変数の値を確認してみましょう！

> write-output $name

> write-output $birthday

> write-output $age

正しく格納されていましたね。

変数は型を指定して作成しているため、その型に合ったものを入れる必要があります。

※型を指定していない場合は、どんな型でも格納は可能となっていますが、格納した時点で型が確定します。

このどんな型でも格納可能な変数の型をVariant型(バリアント型)と呼んでいます。

他の言語ではvoid型と呼ばれいたりもします。

配列とは？
先ほど作成した変数は一人分を用意しましたが、複数人分の変数を用意する時はどうしたらいいでしょうか？

name1、name2、name3、name4 ……と人数分作成すればいいと思いますが、100人、1000人、10000人分となるとどうでしょう。

変数を作成するだけで気が遠くなる量ですし、管理も大変になります。

同じ型の変数を、連番で呼び出せる入れものを「配列」と呼びます。

イメージは箱が縦に並んでいる感じになります。

配列に初期値を設定した状態で作成してみましょう。

> $name = @("山田太郎", “山田次郎”, "山田三郎", “山田四郎”)

配列の値を確認してみましょう。

> write-output $name

以下のように配列へ格納した内容が並んで表示されます。

山田太郎
山田次郎
山田三郎
山田四郎

添え字を指定して、2番目の値を表示してみましょう。

> write-output $name[1]

「山田次郎」が表示されました。

※添え字とは、特定の要素や位置を示すために使われる番号や記号のことです。

PowerShellの添え字は0から始まるため、実際に配列に格納されている件数-1となります。

先ほど作成した配列は一次元(いちじげん)配列と呼ばれるものですが、多次元(たじげん)で配列を作成することもできます。

多次元は難しそうに聞こえますが、三次元(さんじげん)までは直感的に理解することが可能です。

よほど高度なことをしない限りは、二次元までしか使うことはありませんがオブジェクトを理解するのに必要なので頑張りましょう！
●一次元配列(縦方向のみ)

一次元配列は１方向(縦方向)に連続して並んだ変数の入れ物

> $name = @("山田太郎", “山田次郎”, “山田三郎”)

●二次元配列(縦方向と横方向)

二次元配列は２方向(縦方向と横方向)に広がる連続した変数の入れ物

> $name = @(@("山田太郎", “山田次郎”, “山田三郎”),@("やまだたろう", “やまだじろう”, “やまださぶろう”),@("yamada.taro", “yamada.jiro”, “yamada.saburo”))

●三次元配列(縦方向と横方向と高さ)

三次元配列は３方向(二次元配列に高さの重なりが追加された)に広がる連続した変数の入れ物

構造体変数とは？

構造体配列とは？

