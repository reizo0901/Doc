プログラム言語の分類について

プログラム言語は大まかに分類すると「インタプリタ言語」と「コンパイラ型言語」、「マークアップ言語」があります。

それぞれの言語はコンピュータが処理をする上で大きな違いがありますので、理解しておくと良いかもしれません。

「コンパイラ型言語」
コンパイラ型言語では作成したソースプログラムを実行するには、コンピュータが処理しやすい機械語(実行形式)に変換(コンパイル)する必要があります。
機械語に変換することにより、コンピュータが理解しやすいため、処理速度も速く消費メモリも抑えることが出来ます。
コンパイルをするための環境やプログラムが必要となります。
最近ではプラットフォームよって再コンパイルの必要性を解消した仕組みとして実行する直前にコンパイルが行われるJITコンパイラなどもあります。開発で利用されているフレームワークなどがこれに該当する場合があります。

※コンパイルするとプラットフォームよって再コンパイルが必要なのか？
　WindowsのネイティブアプリをLinuxやMacで直接動かすことはできません。理由として実行ファイルがOSやハードに合った命令を出せるようになっていないためです。実行直前にOSやハードに適したコンパイラーで機械語へ変換することによってプラットフォーム毎の違いを解決し、処理速度や消費メモリを有効利用出来る状態を保ちます。

主な言語：C,Java,COBOL,Go,Swift
主な変換後の拡張子：EXE,COM,PE
主なフレームワーク：.NET Framework,Ruby on Rails,Laravel,Spring Framework,Django,Flask

「インタプリタ型言語」
インタプリタ型言語では作成したソースプログラムを機械語変換(インタプリタ)を介して、コンピュータで処理されるため、インタプリタが処理する分だけの処理速度とメモリが多く使われます。

メリット：プログラムの作成途中でも、途中まで実行させれるため、実行・確認・修正が容易であることから初心者に優しい言語方式と言えます。
デメリット：実行速度が遅く、特にループ処理を多い場合にメモリの消費と処理速度が落ちる傾向にある。

主な言語：Shell,powershell,VBScript,python,PHP,R

「マークアップ言語」
マークアップ言語は、文章に目印(マーク/タグ)を付けることによって、見出しや強調、色の変更などの装飾を行うことができます。
インタプリタ型言語と同じように思えますが、プログラム言語特有の条件式や繰り返し処理などの複雑な処理は得意としていません。またマークアップ言語はプログラム言語ではないとも言われています。

主な言語：HTML,TeX,XML

「インタプリタ型のコンパイル」
言語の中にはインタプリタ型言語をコンパイル出来るものも存在している。
またソースプログラムの中にバイトコードと呼ばれる機械語の記載をすることにより一部を機械語と同じような動作をさせることが可能が言語も多数存在しています。

主な言語：バッチ,C#,Visual Basic .NET,Java,TypeScript,Visual Basic for Applications(VBA)

