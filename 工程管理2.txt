工程管理

①要求分析
①要件定義
要件定義とは、クライアントがシステムに求めている機能をまとめて、システムの仕様や範囲を決めることです。例えば、必要な機能や性能、要求される信頼性や保守性、そのほか実現すべき業務モデルや業務フローなどについて、クライアントの要望を詳しくヒアリングし、要件定義書を作成します。要件定義の精度が高いほど外部設計を行いやすく、その後の仕様変更を減らすことができます。
要件定義で確定しなかった項目は、次の外部要件の段階で再度検討され、仕様が決定されます。
②基本設計
②外部設計(External Design)
外部設計は、基本設計や外部設計とも呼ばれ、一般的に外部設計までが上流工程に含まれます。
要件定義で決定した機能や性能、制約条件などを基にしてシステムの基本となる設計を行います。操作画面や操作方法、データ出力など、ユーザーから見えるインターフェース部分の仕様を決定したり、セキュリティや運用規定、システム開発のスケジュールや費用などを設計したりと、基本的にユーザーに向けた仕様を設計するのが外部設計です。

 外部設計とは？
 
外部設計は、実際にシステムの仕様を決定する段階です。要件定義で決定したシステムの機能要件や非機能要件、制約条件、外部とのやり取りなどをより具体的な仕様にすることで、実際にプログラム可能な形にします。
ここでは、外部設計の主な項目を「方式設計」「機能設計」「そのほかの設計」の三つに分けて解説します。

・方式設計

方式設計では、システムの実装方針やプラットフォームの方針を設計します。システムがどのようなハードウェアで構成されるか、ハードウェアやソフトウェアの機能や構造をどうするか、プラットフォームは何か、開発言語をどうするかなどを決めます。アプリケーション全体の構造もここで設計されるため、アーキテクチャ設計とも呼ばれています。

・機能設計

機能設計では、システムをモジュール単位で分割し、各モジュールや使用するデータベースの設計を行います。具体的には、データの入出力、データベース同士のデータの受け渡し、ユーザーによる操作、帳票の出力などです。
また、画面のレイアウト、操作方法、帳票類の書式など、システムの使いやすさやユーザー満足度につながるインターフェース部分の仕様を決めるのも機能設計の役割です。

・そのほかの設計

そのほかの設計では、クライアントに求められている機能やセキュリティ、運用規定、納期、開発費用など、業務として運用するために必要な部分を決定します。

外部設計では、「外部設計書」「画面仕様書」「帳票仕様書」「インターフェース仕様書」などが作成されます。これらの内容は、クライアントに確認して合意を取ることが必要です。

 内部設計とは？

内部設計では、外部設計の結果を実際にプログラミングできるように、システム内部に特化した詳細な設計を行います。
ここでは、内部設計の主な項目を「機能分割」「物理データ設計」「入出力の詳細設計」の三つに分けて解説します。

・機能分割
機能分割では、プログラミングやシステムのメンテナンスをしやすくするために、機能をモジュールごとに分割し、各モジュールの機能を明確化します。また、機能間でデータが処理される際の流れ（データフロー）を設計します。データが処理される流れを明確にすることで、設計バグを洗い出せます。

・物理データ設計
物理データ設計では、ユーザーには見えないシステム内部で使うファイルやデータのやり取りに関する部分の設計を行います。

・入出力の詳細設計
入出力の詳細設計では、外部設計で決めたインターフェースをプログラミングでどのように実装し、表現するかをさらに細かく設計します。例えば、エラー処理や初期値・デフォルト値の定義、入力データのチェック方法、表示するメッセージなどについても検討します。

内部設計では、「機能仕様書」「データフロー図」「データベース物理設計書」などが作成されます。内容はプログラミング作業を行うメンバーに共有されますが、内部設計でクライアントとの調整を行うことはほとんどありません。

　外部設計と内部設計の違い
　
外部設計と内部設計の大きな違いは、クライアントから見える部分を設計するか、見えない部分を設計するかという点です。

・外部設計
外部設計は、システムの外側でユーザーやクライアントの目に触れる部分（インターフェース）、システム全体の概要、主な機能を設計します。システムがユーザーにとって使いやすいかどうかを左右する部分になるため、クライアントのビジネスの結果に直接影響することもあります。そのため、基本的に外部設計の内容は、クライアントの了解を得る必要があります。
また、クライアントの目に触れるハードウェア構成やシステム開発のスケジュール、費用などの管理も外部設計で決定します。

・内部設計
システムを開発するときに必要な部分やシステムの裏側（内部）でデータがどのように処理されているのかなど、ユーザーにもクライアントにも見えない部分を設計します。そのため、内部設計の結果にクライアントの了解を得る必要はほとんどなく、主にシステム開発の担当者やプログラミングを行うメンバー向けのものです。プログラミングに必要な情報を設計し、メンバーが外部設計で決めた仕様を実装しやすいように表現する必要があります。

③詳細設計
③内部設計(Internal Design)
④プログラミング



⑤単体テスト
　単体テストとは作成したモジュール単位で設計書にて要求された要件・機能を満たしているかどうか確認、検証するテストの工程です。不具合が見つかった場合には製造工程(プログラム)へと戻り、修正対応を実行し、テスト結果のフィードバックを実施します。単体テストが完了し問題ないことが実証された後に結合テスト(後述)へと移行します。
　
　英語表記はUnit Test
　略式はUT

別称はユニットテスト、モジュールテスト

⑥結合テスト
　結合テストとは複数のモジュールを組み合わせてシステムが正しく連携し合い、不具合なく動作するかを確認、検証するテスト工程です。
　主にモジュール間のインターフェイスが正しく機能するかモジュールを結合した状態でのブラックボックステストの２つの種類を確認します。結合テストが完了し、問題ないことが実証された後に総合テスト(後述)へと移行します。

英語表記はIntegration Test
略式はIT

別称は連結試験、結合試験、統合試験

⑦システムテスト
システムテストとはシステムが全体を通して要求された機能や性能を満たしているかどうかの検証を行うシステム開発校手に置けるテストフェーズの最終段階のテスト工程です。システムテストをじっしする際は、本番に近い環境を用いてテスト実施します。

英語表記はProduct Test
略式はPT

別称は総合テスト

⑧受け入れテスト
受け入れテストとは開発者によって作成されたシステムが要件道理に仕上がっているかお客様が判断をするためのテスト工程です。
そのため実際に使用するデータや業務上使用する操作方法を用意してテスト実施します。テスト工程における最後の関門です。

英語表記はUser Acceptance Test
略式はUAT

別称は承認テスト、検収テスト

この受け入れテストは運用テスト合わせて実施される場合もあります。

⑨運用テスト
運用テストとは業務上の操作に対する確認だけでなく、操作に対する応答時間などシステムの処理性能の計測やシステムに対する負荷への耐久力の計測なども実行します。
またイレギュラーなケース等想定されるものは確率が低かろうとも網羅的テストすべき観点を作成し様々な業務視点で処理を行います。
運用テストの工程は前述の受け入れテストと合わせて事項さえるケースもあります。

英語表記はOperation Test
略式はOT

⑩運用・保守



・開発モデルってなに？

開発モデルとは、システムを開発するための方式として標準化されている開発手順や手法のこと。
代表的な開発モデルとしては、ウォータフォールモデルやアジャイル、スパイラル、プロトタイピング
などがあります。

それぞれのモデルにはそれぞれメリットとデメリットが存在していますが、日本の企業間で開発の依頼が
発生する場合は、圧倒的にフォーターフォールモデルが多く感じます。←あくまでも個人の感想です。

それでは、それぞれのモデルについて紹介していきます。

●ウォーターフォールモデル

「ウォーターフォール」モデルとは、プロジェクトのフェーズごとに進行していく、順序立てられたソフトウェア開発プロセスのことです。「Water（水）がFall（落ちる）」ように、戻りがなく、1つのフェーズが完了してから、次のフェーズが開始されます。上流工程（要件定義・設計）とよばれる段階で、ソフトウェアの仕様や開発要員の調達等を行い、下流工程（開発・テスト・・・）で開発が行われます。大規模プロジェクトに採用されることが多いです。

ウォーターフォール のメリット
ウォーターフォールは、一連のステップに沿って、開発の各段階に期限を設けたスケジュールを設定し、製品が開発プロセス手法の段階を1つずつ進んでいくことができます。これにより、フォロー、コントロール、チェックが容易な開発手法となっています。

ウォーターフォール のデメリット
ウォーターフォールは基本的に「手戻りが発生しない」前提で進んでいくので、もし手戻りが必要な修正が起きた場合、かなりのコストと工数がかかってしまうことがあります。つまり、仕様変更がしにくいため、ソフトウェアを実際に使うユーザーのフィードバックを取り入れることが難しいです。

ウォーターフォールモデルの仲間に「スパイラルモデル」「V字モデル」やテスト工程を同時に進めていく「W字モデル」も存在します。

**********
段階的に進めていくシステム開発手法
開発の工程は「要件定義」「基本設計」「詳細設計」「システム実装」「テスト」という流れが基本です。ウォーターフォールモデルでは、この一つひとつの工程を順番に進めていきます。

ウォーターフォールを日本語にすると「水が落ちる」という意味で、段階ごとに開発を完了させるので前の工程に後戻りはできません。より確実に開発を進めるために、工程ごとにレビュー（成果物の確認）を行うのが特徴です。しかし、要件定義が甘く「開発したかった成果と全く異なっていた」ということも起こり得ます。

ウォーターフォールモデルが誕生したのは1970年ごろと古いですが、今でも広く使われています。なお、ウォーターフォールモデルはV字モデルとの関わりが深く、V字モデルとは開発工程とテスト工程をリンクさせた考えのことです。V字の左側に開発工程、右側にテスト工程が配置され、工程ごとにテストを行うウォーターフォールモデルとの相性が良いです。これが、ウォーターフォールモデルの上位互換として活用されています。

大規模開発案件に向いている
規模が大きい開発プロジェクトの場合、動員できる人数が限られているためスケジュール管理の難易度が高くなります。特に規模が大きい開発案件であれば開発期間も長くなりやすく、少しのズレが大きな遅延に繋がってしまうでしょう。

ウォーターフォールモデルでは、仕様変更をせずに済むように入念な要件定義をしなければなりません。要件定義どおりにプロジェクトを進めれば、開発途中のリソースなどの管理もしやすいため、スケジュールのズレも生じにくくなります。

したがって、適切な予定を組んで人員を割り当てることができるため、大規模案件に向いています。また、同じ理由から高い品質が求められるプロジェクトにも向いているでしょう。

ウォーターフォールモデルのメリット
つづいて、ウォーターフォールモデルのメリットを見ていきましょう。

プロジェクト全体の計画が立てやすい
ウォーターフォールモデルは、上流工程（要件定義）から確実に開発を進めていく手法です。そのため、要件定義を終えた段階で、開発スケジュールの全容を把握できます。開発する内容やスケジュールをしっかりと決めてからプロジェクトが進むため、計画を実行しやすいでしょう。

予算や人員の手配がしやすい
より詳細な計画を作れると人員の確保もしやすくなり、プロジェクトの最初の段階で「開発には何が必要で」「何が足りないのか」が分かります。また、工程ごとに取り組むべきことがはっきりするため、開発者の入れ替わりが発生しても引き継ぎが簡単です。これにより、プロジェクトをストップせずに進められるでしょう。

進捗管理がしやすい
ウォーターフォールモデルは、全ての工程を把握した状態で開発が進んでいきます。工程ごとに仕様書やタスクが決まっているため、進捗率を管理・把握しやすく、無理がないようにタスクを割り振ることが可能です。進捗管理を適切に行っていれば、トラブルが発生した際にも柔軟に対応できます。

ウォーターフォールモデルのデメリット
ウォーターフォールモデルはメリットが多く、多くの開発現場で使われていますが、デメリットもあります。

手戻りが発生すると工数が増える
ウォーターフォールモデルでは後戻りをせずに開発を進めるのが前提です。しかし、綿密に立てられた計画でも、手戻りが発生する可能性はゼロではありません。

最大のデメリットは、仕様が変更になり手戻りが発生すると全体的な予定が狂ってしまう可能性があることです。そうすれば、開発の工程はやり直しになるため、かえって必要な工数が増えてしまいます。

このように、ウォーターフォールモデルの計画は柔軟性がないため、手戻りしないように進めなければなりません。

ユーザーの意見を取り入れにくい
実際の開発が始まってからは仕様の変更を行いにくいため、途中でユーザーの意見を取り入れることが難しいことがあります。

特にシステム開発を発注したユーザーのイメージがアバウトな場合、実際にできあがった物がイメージとズレることもあります。そのため、せっかく完成したとしても、ユーザーの求めるものでなければやり直しになるかもしれません。

ウォーターフォールモデルで開発を進めるときは、要件定義の段階でユーザーの意見を把握し、要件漏れがないようにすることが大切です。

**********



●V字モデル

「V字モデル」では、関連しあう開発工程とテスト工程を対に並べ、各工程の対応関係を明らかにしています。上図の「V」字のように、「ウォーターフォール」モデルにもとづいて、開発工程を進め、実装工程で折り返し、テスト工程を進めます。
V字モデルのメリット
開発工程とテスト工程の対応関係が明示されているため、適切なテスト内容の決定、テスト工程の進捗管理がしやすいです。また、手戻りから発生する修正コスト増加のリスクも軽減できます。

V手法のデメリット
ソフトウェアは実装工程まで、デモや製品研究のための初期プロトタイプがありません。また、途中で仕様変更が発生した場合には、要件定義書だけでなく、テスト仕様書もその都度、更新する必要があります。

●W字モデル






●アジャイルモデル

「アジャイル」モデルとは、アジャイル・マニフェスト (Agile Manifesto) の「ソフトウェア開発の価値と原則」に沿った開発モデルです。より良いソフトウェアを作ることを目的とし、アジャイルプロジェクトマネジメントには、4つの大原則が書かれています。

プロセスやツールよりも個人やインタラクション
包括的なドキュメントよりも動作するソフトウェア
契約交渉よりもお客様との共同作業
計画よりも変化への対応
 

簡単にまとめると、ユーザーの要求を優先し、仕様変更を前提に開発を進め、小規模な実装とテストを繰り返し、短期間でリリースを目指す開発モデルです。

アジャイルのメリット　
アジャイルモデルでは、市場やユーザーのニーズに迅速に対応し、状況に応じて軌道修正することが可能です。つまり、市場や顧客のニーズに合わない商品を開発するリスクを最小限に抑えながら、ユーザー価値の提供を最大化できます。

アジャイルのデメリット
アジャイルモデルのデメリットは、ユーザーのニーズに基づいて開発が進むため、仕様変更に伴うコスト・スケジュール調整が大きな負担になることがあります。よって、当初の計画から大きく内容が変更したりすると、リリース日に間に合わない・予算オーバーのリスクがあります。

アジャイルは現在、技術分野で広く実施されており、少なくともその考え方は浸透しています。多くの企業では、自社のソフトウェアの開発方法がアジャイルであると信じていますが、本当にそうでしょうか？答えはこちら：

**********
システムやソフトウェアの開発において、プロジェクトにマッチした開発手法を選択することは非常に重要です。現在主流のアジャイル開発ですが、当然メリットだけでなくデメリットもあるので事前に覚えておきましょう。

アジャイル開発のメリット
アジャイル開発のメリットは、臨機応変に柔軟な対応が可能で開発スピードが速いこと。

初めに決定した設計・計画を重視するウォーターフォール開発の場合、トラブルの発生箇所によっては修正にかかる時間やコストが膨大になる可能性があります。しかし、アジャイル開発は機能単位で設計→開発→実装→テストを繰り返しているのでリリースのタイミングが早く、不具合が発生したとしても修正にかかる工数が少なくて済みます。

また、開発途中もコミュニケーションを取りながらフィードバックを行うので、顧客のニーズに最大限応えることができるのも大きなメリットです。

アジャイル開発のデメリット
プロジェクト全体の納期はあるものの、アジャイル開発では仕様・要件ごとにスケジュールを設定して開発に臨むため、全体スケジュールのコントロールが難しい傾向にあります。

また、時として顧客とのコミュニケーションを重視する特性が裏目に出てしまうことも……。なかなか正しい要求が導き出せないままプロジェクトが進行してしまったり、場当たり的な開発に陥って開発の方向性がブレてしまうという懸念も抱えています。

このように、全体の進捗状況やスケジュールの把握が困難な点がアジャイル開発の最大のデメリットと言えるでしょう。しっかり納期に間に合わせられるように、アジャイル開発の経験があるプロジェクトマネージャーを中心に綿密に計画を立てたうえで導入しましょう。

アジャイル開発にも設計書などのドキュメントは必要？
顧客とのコミュニケーションを重視するアジャイル開発では、要件定義書や設計書などのドキュメント類が不要と考えている人も多いようです。

アジャイル開発宣言の中に「包括的なドキュメントよりも動くソフトウェアを価値とする」という一文があるため、ドキュメントの制作は無駄な時間と考えてしまいがち。しかし、同時に「左記のことがらに価値があることを認めながらも、私たちは右記のことがらにより価値をおく」という一文があることを見逃してはいけません。

ドキュメントの価値自体は、アジャイル開発も認めているということはしっかりと理解しておきましょう。例えば、今開発中のプロダクトが一過性のものではない可能性があることも念頭に入れる必要があります。

リリース後に機能を追加しながら運用していく場合、別のチームに引き継ぎを行う必要が発生することもあるでしょう。そんなとき、何の資料も残っていなければ引き継ぎは困難なものになってしまいます。

また、アジャイル開発時にドキュメントを提出していなかったことでシステム開発を完了したことが認められなかったという東京地方裁判所の判例もあります。

無駄な資料を作る必要はありませんが、「要件定義書」「基本設計書」「テスト結果報告書」などの最低限のドキュメントは用意しておくようにしましょう。
**********

アジャイル開発の中には「スクラム(Scrum)」「エクストリーム・プログラミング(XP)」「ユーザー機能駆動開発(FDD)」

●スクラム

スクラム（Scrum）とは、チーム一体となってシステム開発を行うフレームワークのことです。ラグビーのスクラムが語源とされています。

開発チームの作業とプロダクトに責任を持つ「プロダクトオーナー」と、プロジェクトを円滑に進めることに責任をもつ「スクラムマスター」がチーム全体を支援し、開発チーム（3～9人程度）が実際に開発を行います。

スクラムでは、以下の6つのプロセスを定義し、これらの段階的な管理と反復をしながら開発を進めます。

1.デイリースクラム
毎朝チームで集まり、チーム全体の状況や障害、問題点、その日に行う予定の作業を確認します。

2.リリースプランニング（プロダクトバックログ）
プロジェクトの立ち上げ時に、開発するプロダクトの機能の実装順序や開発期間について、チーム全体で計画を立てます。

3.スプリント計画（スプリントバックログ）
1つのイテレーション期間で、プロダクト全体からどの範囲の機能を実現させるかについて、チーム全体で計画を立てます。

4.スプリント
実際の1つのイテレーション期間の開発工程です。スプリントプロセスでは機能の追加や変更、削除は認められません。

5.スプリントレビュー
1つのイテレーション期間で完成したプロダクトのデモを行います。プロダクトがミスなく実装されており、安定して動作することを確認します。

6.振り返り
振り返りはスプリントごとに行います。各スプリントの良かったことや問題点、これから挑戦したいことなど、メンバー全員で話し合い確認します。

このように、スクラムではアジャイル開発の中でもエンジニアや顧客がチームとなってプロジェクトを遂行することに重点を置いています。そのため、チーム内でのコミュニケーションが非常に重要となります。


●エクストリーム・プログラミング(XP)

エクストリーム・プログラミング（Extreme Programming）は、技術者を重視した開発手法です。「XP」と略されます。

エクストリーム・プログラミングは、アジャイル開発の中でも、プログラマー中心の開発手法と言えます。
仕様や要求の途中変更、機能追加などを想定していることが特徴です。
つねに2人1組でプログラミングを行い、細かなチェックを行う「ペアプログラミング」、チーム内で共通したコード記法などを定める「コーディング規約」などのプラクティス（原則）のもと、開発を行います。

**********
エクストリーム・プログラミングは、技術面に重きを置いたプログラマー中心の開発手法。英語表記は「Extreme Programming」で、略称は「XP」です。

事前の計画よりも仕様・要件の途中変更への柔軟な対応を重視した手法で、4つの価値（コミュニケーション／シンプル／フィードバック／勇気）をチーム内で共有することが特徴です。

★エクストリーム・プログラミング（XP）で提唱する4つの価値

①コミュニケーション
ステークホルダー間のコミュニケーションを重視する

②シンプル
設計は必要最低限に止める

③フィードバック
頻繁にテストを行い、フィードバックを重視する

④勇気
仕様変更や設計変更に立ち向かう勇気を持つ
**********

●ユーザー機能駆動開発（FDD）

ユーザー機能駆動開発（Feature Driven Development）は、ユーザーにとっての機能価値（feature）を重視した開発手法です。

あらかじめビジネスモデルを理解し、ログイン機能や購入機能といったユーザー機能を中心に計画をたて、設計や開発を行います。

開発に特化した手法ではなく、プロジェクト管理の面も持ち合わせていることが特徴です。

**********
ユーザー機能駆動開発（Feature Driven Development）は、顧客にとっての機能価値（feature）を重視した開発手法。

ユーザーのビジネスを見える化して必要な機能を洗い出し、適切な間隔で反復的にソフトウェアの開発を繰り返すのが特徴です。
**********

●プロトタイピングモデル

「プロトタイピング」モデルとは、要件定義のあと、プロトタイプを作成し、ユーザー側が確認、要件を満たすまで修正していきます。プロトタイプが合格すれば、各種設計に入り、本番の開発工程に入っていきます。

プロトタイピングのメリット
プロトタイピングモデルでは、上流工程の段階でユーザーがプロトタイプを確認するため、仕様固めの精度が高くなり、手戻りが発生しにくくなります。ユーザー側にとっても、実際にプロトタイプを見て触ってみることによって、自身が必要としてる機能やUI・UXを再確認することができます。

プロトタイピングのデメリット
プロトタイプ作成・確認段階で、工数が多くかかってしまう傾向があります。プロトタイプを触っていくうちに、「こんな機能もほしい」など、次々とリクエストが発生してしまうと、予算オーバーであったり、実装が難しかったりします。要件定義にないスコープでは、次期のバージョンアップで対応するなど、基本的には要件定義をベースにプロトタイプを作成・確認することがポイントです。

●スパイラル

スパイラルモデルとは、1つのシステムを、いくつかのサブシステムに分け、上図のようにサブシステム１・・・サブシステム２・・・の順番で開発を進め、システムの完成度を高めていきます。まるで螺旋階段のように進んでいくことからスパイラルモデルと呼ばれます。

スパイラル のメリット
仕様変更に柔軟に対応できます。例えば、サブシステム１のテスト後、ユーザーからフィードバックがあって仕様変更する場合、次フェーズに巻き取って対応ができます。つまり、「手戻り」が発生しにくくなります。また、サブシステムごとにユーザーが確認するため、ユーザーにとっての完成度・満足度も確保しやすいのが特長です。

スパイラル のデメリット
プロジェクトの管理がかかります。プロジェクト開始時にフェーズ数が不明なため、時間の見積もりが難しい傾向があり、リスク管理・分析を慎重に実施しないといけません。最悪の場合、終わりが見えず、スパイラルは永遠に続くかもしれません。

**********
スパイラルモデルの開発の流れは下記の通り

システムを複数のサブシステム（もしくはフェーズ）に分割します。（上図ではサブシステム1～3に分割しています）
サブシステム1の開発を行います。
サブシステム1が完了したら、依頼主のお客様に確認してもらいます。
次にサブシステム2の開発を行います。（サブシステム1で出たお客様の要望はサブシステム2にも反映していく）
サブシステム2が完了したら、再び依頼主のお客様に確認してもらいます。
このサブシステム作成→確認の流れをシステム全体が完了するまで繰り返していきます。
スパイラルモデルのメリット
スパイラルモデルのメリットは仕様変更に柔軟に対応できる点があげられます。

有名な開発手法であるウォーターフォールモデルは、要件定義の段階でお客様の要求がすべて明確になっている必要があり、要件定義の内容から「設計」→「開発」→「テスト」と各工程を行っていきます。そのため途中で仕様が変わった場合、"手戻り"が発生し、想定外なコストが掛かってしまいます。

スポンサーリンク

その点、スパイラルモデルは短い期間に「設計」→「開発」→「テスト」を繰り返して品質を高めていく手法の為、途中の仕様変更にも柔軟に対応しやすい開発手法です。

スパイラルモデルのメリット

またサブシステム（またはフェーズ）に分けることにより、サブシステムが完成する度に、発注したお客様がシステムを確認する事が出来るのもスパイラルモデルのメリットです。

スパイラルモデルのデメリット
スパイラルモデルは「設計」→「開発」→「テスト」と各工程を繰り返して行い、仕様変更にも柔軟に対応できる事から、初期の想定よりシステムの仕様が肥大化してコストが増大する危険性がある開発手法といえます。

ウォーターフォールモデルは「前の工程には戻らない」というのが前提の開発手法の為、要件定義の段階でしっかり要件を固めて開発を進めていきます。

スパイラルモデルの場合は、初期段階で全体の要件をしっかり固めなくても、はじめに開発するサブシステム（またはフェーズ）の部分の要件だけを固めれば、開発することが出来ます。

その後、少しずつ要件を固めていき、全体の品質を高めながらシステムを完成させていきます。そのため初期の想定よりシステムの仕様が肥大化し、その分コストが増大化する可能性があるのです。
**********


●DepOps

「DevOps（デブ・オプス）」とは、開発プロセス（”Dev”lopment）と運用プロセス（”Ope”ration）を一体化させようとする開発モデルです。

設計の初期段階から製品のリリースまで、通常は別々に運営されているこの2つのチームの間にコラボレーションの文化を作り出し、相互のコミュニケーションを可能にし、より高い効率とスピードを得ることを目的としています。

DevOpsのメリット
DevOpsは、開発サイクルを短縮することで、よりスピーディーな開発を促進します。開発チームと運用チームが協力し、自動化し、同じ技術を使用することで、製品はより早く開発されます。その結果、コミュニケーションとコラボレーションが改善され、時間が節約され、生産性が向上します。

DevOpsのデメリット
DevOpsを実現するのは簡単ではありません。双方のバランスのとれたコラボレーションのために、体制づくりやプロセスを整備する必要があります。適応には時間がかかり、強いチームワーク精神が求められます。

**********
DevOpsとは何か？目的やメリットを解説
DevOpsは「デブオプス」と読み、開発を意味するDevelopmentと、運用を意味するOperationsを組み合わせた造語です。

DevOpsに厳密な定義はありませんが、アプリの開発チームと運用チームが協力することにより、迅速かつ柔軟なサービス提供を行うための考え方や仕組みをDevOpsと呼びます。

DevOpsが重視されるようになった背景として、アプリ制作の過程で開発チームと運用チームの目指す方向が相反してしまうことがあります。

アプリの利便性を高めたい開発者と、安定的な運用をしたい運用者との間で、対立が生じてしまうという問題です。これらの問題を解決するために、DevOpsの考え方が生まれました。

なお、システム開発やプロジェクトマネジメントに関して、詳しくは以下の記事をご覧ください。

◆システム開発の工程とは？ウォーターフォールとアジャイルの流れについて解説
◆PMP資格とは？難易度や取得方法、仕事上の価値についてわかりやすく解説

思考
DevOpsのメリットとは？
アプリ開発および運用で、DevOpsを実施する主なメリットは次の3つです。

スピードの向上
DevOpsではアジャイル開発の手法を用いることが多く、機能ごとのリリースをスピーディに行います。また、テスト期間を短縮し、早期にリリースすることが可能です。

生産性の向上
DevOpsはサービスをリリースするまでの期間が短く、ユーザーからのフィードバックを早期に得て、サービスの不具合や改善点を修正することができます。また、開発チームと運用チームの連携により、効率的な情報のやり取りをする体制ができ、無駄な作業を削減できます。これらにより、生産性が向上することがDevOpsのメリットです。

信頼性の向上
DevOpsは小さな規模で開発する手法のため、バグや不具合を見つけやすくなります。不具合が起きた場合にも迅速に対応できるため、信頼性の高いサービスを提供できることがDevOpsのメリットです。

　

Udemyで講座を探す
DevOpsのプロセスとは？図でわかりやすく解説
DevOpsによる開発は、複数のプロセスから構成されます。

DevOpsのイメージ
以下で、DevOpsの各プロセスを解説します。

計画
開発するサービスに求められる機能を定義し、開発のタスクや進捗管理の方法について計画を立てます。

開発
計画に従って、コードの記述など開発工程を進めます。

継続的インテグレーション（CI）
継続的インテグレーションとは、開発したコードのビルドとテストを継続的かつ自動的に実行することです。1日に数回、コードのビルドとテストを行うことで、コードの不具合を早期に発見して修正できます。

デプロイ
開発工程が一通り終わったら、実際の使用環境で使えるように設定します。

運用
リリース後の運用では、サーバーおよびアプリケーションの監視と、トラブル発生時の対応が重要となります。

継続的フィードバック
継続的フィードバックとは、サービスに関するユーザーからの意見や要望を継続的に受け取り、開発プロセスに反映させることです。チャットやメールによる問い合わせのほか、SNS上のコメントなども、継続的フィードバックに取り入れられます。

開発プロセス
DevOpsとアジャイル開発の違いとは？
アジャイル開発とは、「要件定義→設計→開発→テスト→リリース（運用）」といった開発工程を、1つの機能を単位とした小さいサイクルで繰り返す開発手法です。すべての機能について計画や開発、テストを順番に実行していく従来のウォーターフォール開発に対して、アジャイル開発は柔軟性の高さやリリースまでの早さが特徴の開発モデルだといえます。

アジャイル開発について、詳しくは「アジャイル開発とは？主流の開発手法「スクラム」もくわしく解説！」をご覧ください。

DevOpsとアジャイル開発は、継続的なサイクルが含まれることや、小さな単位ごとに開発サイクルを回すことなどの共通点があるため、混同される場合があります。しかし、DevOpsとアジャイル開発は異なる概念です。

DevOpsはチームメンバーや組織の協力体制を表し、アジャイル開発は開発の進め方を表します。

そのため、DevOpsとアジャイル開発をどちらも導入する場合もあります。DevOpsによって開発チームと運用チームの連携をとりつつ、アジャイル開発を導入して、より効率的で柔軟な開発を行うことが可能です。

　

DevOpsの実施に必要な2つのポイント「ツール」と「マインド」とは？
DevOpsを実施して開発チームと運用チームの協力体制を作る際には、ツールとマインドの両面が重要です。

DevOpsに役立つツールを使用すれば、DevOpsを導入しやすく、効率的に進めることができます。また、組織全体の文化や心構えを共有することも、DevOpsの実施に必要です。

以下で、ツールとマインドのそれぞれについて具体的に解説します。

チーム
DevOpsに役立つツールとは？
DevOpsの実施には、プロジェクトの進捗状況を管理するためのツールや、チームメンバーのコミュニケーションツール、開発環境を構築するためのツールなどが役立ちます。

仮想化ツール
仮想化ツールとは、1台のサーバーを複数のサーバーのように使用できるものです。チームでの作業に役立ちます。

インフラ管理ツール
AnsibleやDocker、Chefなどのインフラ管理ツールを使用すると、サーバーを立ち上げる際の設定作業を自動化できます。

CI／CDツール
CI／CDツールは、継続的インテグレーションおよび継続的デリバリーに役立つツールです。CI／CDツールを導入すれば、データ変更時のリリースやテストを自動化できます。

タスク管理ツール
タスク管理ツールは、DevOpsのプロジェクトに携わるメンバーへのタスク割り振りや、タスクの進捗確認に役立ちます。

コミュニケーションツール
開発チームと運用チームの情報共有を行うために、コミュニケーションツールの導入が欠かせません。チャットツールなど、迅速な情報共有ができるツールがいいでしょう。

バージョン管理ツール
バージョン管理ツールでは、データの作成者や変更者、変更日時などを確認したり、過去の状態を復元したりすることが可能です。

このほか、AWSやAzureなどのクラウドサービスにもDevOpsに役立つ機能があります。クラウドサービスについて、詳しくは以下の記事をご覧ください。

◆AWSとは何か？サービス例やメリットをわかりやすく解説！
◆Microsoft Azure（アジュール）とは？基礎からわかりやすく解説！

DevOpsで重要なマインドとは？
開発チームと運用チームが協力してDevOpsを導入するためには、組織的な文化やマインドが重要となります。特に重要なポイントは以下の通りです。

開発チームと運用チームがお互いを尊重する
DevOpsでは、一緒に働くメンバーを尊重しあうマインドが前提となります。チームの垣根を超えて、お互いの能力や功績を正しく評価しあうことで、より緊密な連携が可能になるでしょう。

チームメンバーを信頼する
チームメンバーを信頼し、開発や運用に関する情報を共有することが、DevOpsの実施に役立ちます。

良いサービスにするという共通目的を持つ
開発チームと運用チームが共通目的を持つことで、柔軟性が生まれます。チームの都合ではなく、サービスのために必要なことであるかどうかを基準にすることが大切です。

　

この記事では、DevOpsの概要やアジャイル開発との違い、DevOpsに必要なツールとマインドについて解説しました。DevOpsを導入すれば、開発チームと運用チームがお互いに協力しあいながら、品質の高いサービスを提供できるでしょう。
**********
