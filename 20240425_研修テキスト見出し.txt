1.AWSコンソールへサインイン
  1.連携済みのURLからAWSに接続
  2.[IAMユーザーとしてサインイン]画面で[ユーザー名]と[パスワード]を入力して[サインイン]をクリック
  3.リージョンが[東京▼]以外になっている場合は、検索窓の右側にある[リージョン名▼]をクリックし、
2.ネットワーク環境構築
2-1.VPC作成
  1.[AWSコンソール]画面上部の検索窓で"vpc"と入力し、検索結果の[VPC]をクリック
  2.[AWS VPC]画面で[VPCを作成]をクリック
  3.[VPCを作成]画面で以下を設定し、[VPCを作成]をクリック
2-2.VPCにサブネットを作成
  1.左ペインから[サブネット]をクリック
  2.[サブネット]画面で[サブネットを作成]をクリック
  3.[サブネットを作成]画面で、以下を設定し、[サブネットを作成]をクリック
2-3.インターネットゲートウェイ作成、VPCに紐付け
  1.左ペインから[インターネットゲートウェイ]をクリック
  2.[インターネットゲートウェイ]画面で[インターネットゲートウェイの作成]をクリック
  3.[インターネットゲートウェイの作成]画面で、以下を設定し、[インターネットゲートウェイの作成]をクリック
  4.画面右上の[VPCへアタッチ]をクリック
  5.[VPCにアタッチ]画面の[使用可能なVPC]で、作成したVPCを選択し、[インターネットゲートウェイのアタッチ]をクリック
2-4.ルートテーブル作成
2-4-1.ルートテーブルの設定
  1.左ペインから[ルートテーブル]をクリック
  2.[ルートテーブル]画面で[ルートテーブルを作成]をクリック
  3.[ルートテーブル]画面で、以下を設定し、[ルートテーブルを作成]をクリック ★以下の設定値
2-4-2.ルートテーブルを編集
  1.作成したルートテーブル[rtb-xxxxxxxxxxxxxxxxx]の画面下の[ルート]タブをクリックして、[ルートを編集]をクリック
  2.[ルートを編集]画面で[ルートを追加]をクリック
  3.追加表示された[ルートを編集]で、以下を設定し、[変更を保存]をクリック
2-4-3.サブネットの関連付けを編集
  1.[サブネットの関連付け]タブをクリックして、[サブネットの関連付けを編集]をクリック
  2.[サブネットの関連付けを編集]画面で、2-2で作成した２つのサブネットにチェックを入れ、[関連付けを保存]をクリック
3.Amazon EC2(仮想サーバ)作成
3-1.AWS EC2(インスタンス)起動
  1.[AWSコンソール]画面上部の検索窓で"ec2"と入力し、検索結果の[EC2]をクリック
  2.[AWS EC2]画面の[インスタンスを起動]枠の[インスタンスを起動]をクリック
3-2.名前とタグの追加
  1.[インスタンスを起動]画面で以下を設定
3-3.アプリケーションおよびOSイメージ(AMI)の指定
  1.[クイックスタート]タブ >[Amazon Linux]の順でクリックし、[Amazon Linux 2 AMI…]を選択
3-4.インスタンスタイプの指定
  1.[インスタンスタイプ]の選択欄で[t2.micro]を選択
3-5.キーペア(ログイン用の鍵)作成
  1.[キーペア(ログイン)]枠の[新しいキーペアの作成]をクリック
  2.[キーペアを作成]画面で以下を設定し、[キーペアを作成]をクリック
  3.ダウンロード用のダイアログが表示されたら、
  4.ダウンロード後に元の画面に遷移するので、キーペア名の欄に作成したキーペアが設定されていることを確認
3-6.ネットワーク設定
3-6-1.VPC、サブネット設定
  1.[ネットワーク設定]枠の右側にある[編集]をクリック
  2.[ネットワーク設定]枠に以下を設定
3-6-2.ストレージを設定
  1.[ストレージを設定]枠で以下を設定
3-6-3.インスタンスを起動
  1.[概要]枠のインスタンス数が"1"であることを確認し、[インスタンスを起動]をクリック
3-6.4. EC2にElastic IP アドレス割り当てと関連付け
  1.左ペインから[Elastic IP]をクリック
  2.[Elastic IP アドレスを割り当てる]をクリック
  3.[Elastic IPアドレスを割り当てる]画面で、以下を設定し、[割り当て]をクリック
  4.[Elastic IP アドレス]画面右上の、[このElastic IPアドレスを関連付ける]をクリック
  5.[Elastic IP アドレスの関連付け]画面で以下を設定し、[関連付ける]をクリック
4.Amazon EC2にSSH接続
4-1.キーペアのアクセス権の変更
  1.[スタート]ボタンをクリック後、"cmd"と入力し、[Enter]を押下して「コマンドプロンプト」を起動
  2.[コマンドプロンプト]で、以下のコマンドを実行
4-2.Amazon EC2にSSHで接続
  1.[コマンドプロンプト]で、以下のコマンドを実行
  2.以下のメッセージが表示されたら、"yes"と入力し[Enter]キーを押下
5.ホスト側のソフトウェアのセットアップ
5-1.パッケージの更新とTreeコマンドのインストールとバージョンの確認をします。
5-2.サーバのホスト側にdjangoをインストールとバージョンの確認をします。
5-3.サーバのホスト側にコンテナ型仮想化ソフトウェアをインストールします。
  1.Dockerインストールとバージョン確認
  2.Dockerサービスの起動
  3.Dockerサービスの自動起動を有効化
  4.ec2-userセカンダリーグループにdockerグループを追加
  5.再起動
  6.SSH接続
  7.dockerの状態確認
5-4.コンテナ型仮想化ソフトウェア(Docker)を操作してみよう。
  1.Docker HUBサイトで、nginxの公式イメージファイルを検索する。
  2.Docker HUBから「nginx」のイメージを取得する。
  3.取得したイメージを確認する。
  4.取得したイメージをコンテナ化し、実行する。
  5.WEBブラウザから、nginxが動作しているか確認する。
  6.SSHコンソールで[CTRL]+[C]を押下して、デーモンを停止する。
  7.コンテナのプロセス状態を確認してみましょう。
  8.停止しているコンテナも表示できるように以下のコマンドを実行してみましょう。
  9.WEBブラウザから、nginxが停止しているか確認してみましょう。
  10.コンテナの詳細情報を確認してみましょう。
  11.コンテナ(nginx)のログを確認してみましょう。
  12.今度はコンテナをバックグランドで動かしてみます。
  13.もう一度コンテナの状態を確認してみましょう。
  14.動作しているコンテナに接続してみましょう。
  15.nginxがブラウザに表示しているコンテンツを見てみましょう。
  16.ブラウザに表示される「Welcom to nginx!」を「Welcome to mysite!」に変更してみましょう。
  17.コンテナから切断しましょう。
  18.コンテナを停止してみましょう。
  19.コンテナを削除してから、消えたことを確認してみましょう。
  20.次にイメージを削除してから、消えたことを確認してみましょう。
5-5.複数のコンテナを操作しやすくするためのツール(docker-compose)をインストールします。
  1.docker-composeファイルの格納フォルダ作成
  2.docker-composeファイルダウンロード
  3.ダウンロードしたdocker-composeファイルを実行形式に変更し、シンボリックリンクを作成
6.docker-composeの動作確認(nginxを起動するまで)
  1.フォルダ並びにスクリプト、設定ファイルの作成
  2.docker-composeファイルについて
  2.1.WEBサーバのコンテナを作成する。
  2.2.WEBサーバを起動してみる。
  2.3.WEBサーバが起動したか確認してみる。
  2.4.WEBサーバを停止する。
7.3層アーキテクチャを構築する。
  1.nginx.conf を用意する。
  5.wsgiの通信で必要とされる uwsgi_params を用意する。
  6.djangoコンテナ側でnginxコンテナからの通信を受けられるように、uwsgi.ini の作成を行う。
  7.djangoコンテナイメージの元となるDockerfileを用意する。
  8.djangoコンテナで必要とするPythonのモジュールのリストを用意する。
  9.djangoコンテナ内で実行されるシェルスクリプト（startup.sh, setuser.sh）を用意する。
    9.1.startup.shを用意する。
    9.2.setuser.shを用意する。
    9.3.startupディレクトリ配下の全てのファイルに実行権限が付与されていることを確認する。
  10.docker-composeファイルをバックアップし内容を修正します。
  10.django ディレクトリ内でdjango projectの作成を行う。
  11.コンテナ内のdjangoに外部からの接続を許可する。  
  12.WEBサーバを起動してみる。
  13.WEBサーバが起動したか確認してみる。
  14.Djangoの日本語化と日本ロケールに修正します。
  15.日本語されたか確認する。
  16.データベースのマイグレート ※postgersqlを利用する場合は、settings.pyを編集する必要がある。
  17.djangoの管理者ユーザを作成する。
  18.adminサイトの確認
  19.データベースにユーザが登録されていることを確認してみましょう
  19.CSSが適用されていないので修復する。
  20.静的コンテンツの設定を追加する。
  21.Dockerコンテナからログアウトする。
  22.nginxから/app/static/が参照できるように、docker-compose.ymlを修正する。
  21.nginx.confに/staticへアクセスが来たら自サーバ内の/staticを参照するように修正する。
  22.仮想コンテナを再作成
  22.adminサイトの確認
  23.管理者画面はDjangoの中で、どのような仕組みで表示されているか
9.WEBアプリ作成
9.1.「Hello world...」をMVCモデルを使って表示してみましょう。
  1.dockerコンテナ「django」にログインする。
  2.WEBアプリケーション用の環境を作成
  2.1.カレントユーザをec2-userに切り替える。
  2.2.WEBアプリケーション環境を作成する。
  2.3.boardapp ディレクトリ直下に urls.py を作成する。
  2.4.boardapp ディレクトリ直下の views.pyを修正する。
  2.5.djangoappディレクトリ直下のurls.pyを修正する。
  2.6.作成したサイトを確認する。
9.2.つぶやき板を作成してみましょう。
  1.dockerコンテナ「django」にログインする。
  2.WEBアプリケーション用の環境を作成
  3.カレントユーザをec2-userに切り替える。
  4.WEBアプリケーション環境を作成する。
  5.アプリケーションをプロジェクトへ登録します。
  6.データベース定義を作成します。
  7.定義したモデルを有効化します。
  8.定義したモデルをデータベースに反映します。
  9.Viewを作成します。
  10.データの一覧画面のためのテンプレートを作成します。
  11.データの入力画面のためのテンプレートを作成します。
  12.アプリ内のURLのルーティングを定義します。
  13.プロジェクト内のURLのルーティングを定義します。
  14.作成したサイトを確認する。
12-3. Amazon EC2を終了
1.左ペインから[インスタンス]をクリック
2.[インスタンス]画面で、作成したインスタンスにチェックを入れる
3.[インスタンスの状態] > [インスタンスを終了]をクリック
4.[終了 インスタンス？]画面で、[終了]をクリック
5.[インスタンスの状態]が「実行中」から「終了済み」になることを確認
12-4. キーペアの削除
1.左ペインで[キーペア]をクリック
2.[キーペア]画面で、作成したキーペアにチェックを入れる
3.[アクション] > [削除]をクリック
4.[EC2-kpr-<※LastName>は１つ以上のインスタンスに関連付けることができます。]画面の入力欄に"削除"を入力し、[削除]をクリック
5.作成したキーペアが削除されていることを確認
6.ローカルにダウンロードしたキーペアも削除する
12-5. セキュリティグループ削除
1.左ペインで[セキュリティグループ]をクリック
2.[セキュリティグループ]画面で、作成した２つのセキュリティグループにチェックを入れる
3.[アクション] > [セキュリティグループを削除]をクリック
4.[セキュリティグループを削除]画面の入力欄に、"削除"を入力し、[削除]をクリック
5.作成したセキュリティグループが削除されたことを確認
12-8. VPCを削除
1.[AWSコンソール]画面上部の検索窓で"vpc"と入力し、検索結果の[VPC]をクリック
2.[VPC]画面で、作成したVPCにチェックを入れる
3.[アクション] > [VPCの削除]をクリック
4.[VPCの削除]画面の同時削除対象で以下のリソースが表示されていることを確認
5.[削除を確認するには、フィールドに削除と入力します。]の入力欄に、"削除"と入力し、[削除]をクリック
6.作成したVPCが削除されていることを確認
